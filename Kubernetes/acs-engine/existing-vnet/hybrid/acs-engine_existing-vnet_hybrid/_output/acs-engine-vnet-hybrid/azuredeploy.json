{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "agentWindowsSourceUrl": {
      "defaultValue": "",
      "metadata": {
        "description": "The source of the generalized blob which will be used to create a custom windows image for the agent virtual machines."
      },
      "type": "string"
    },
    "agentWindowsVersion": {
      "defaultValue": "latest",
      "metadata": {
        "description": "Version of the Windows Server 2016 OS image to use for the agent virtual machines."
      },
      "type": "string"
    },
    "agentpool1Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool1Offset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
      },
      "type": "int"
    },
    "agentpool1VMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpool1VnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of agent pool 'agentpool1'."
      },
      "type": "string"
    },
    "agentpool1osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "agentpool1osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "agentpool1osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "agentpool1osImageVersion": {
      "defaultValue": "16.04.201801050",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "agentpool2Count": {
      "allowedValues": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100
      ],
      "defaultValue": 1,
      "metadata": {
        "description": "The number of agents for the cluster.  This value can be from 1 to 100"
      },
      "type": "int"
    },
    "agentpool2Offset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the agent pool where to start creating agents.  This value can be from 0 to 99, but must be less than agentCount"
      },
      "type": "int"
    },
    "agentpool2VMSize": {
      "allowedValues": [
        "Standard_A0",
        "Standard_A1",
        "Standard_A10",
        "Standard_A11",
        "Standard_A1_v2",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B1ms",
        "Standard_B1s",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D1",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D1_v2",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS1",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS1_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F1",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F1s",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "defaultValue": "Standard_D2_v2",
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "agentpool2VnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of agent pool 'agentpool2'."
      },
      "type": "string"
    },
    "agentpool2osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "agentpool2osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "agentpool2osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "agentpool2osImageVersion": {
      "defaultValue": "16.04.201801050",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "apiServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "apiServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "caCertificate": {
      "metadata": {
        "description": "The base 64 certificate authority certificate"
      },
      "type": "string"
    },
    "caPrivateKey": {
      "defaultValue": "",
      "metadata": {
        "description": "The base 64 CA private key used on the master."
      },
      "type": "securestring"
    },
    "clientCertificate": {
      "metadata": {
        "description": "The base 64 client certificate used to communicate with the master"
      },
      "type": "string"
    },
    "clientPrivateKey": {
      "metadata": {
        "description": "The base 64 client private key used to communicate with the master"
      },
      "type": "securestring"
    },
    "cloudProviderBackoff": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider backoff?"
      },
      "type": "string"
    },
    "cloudProviderBackoffDuration": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how long until timeout"
      },
      "type": "string"
    },
    "cloudProviderBackoffExponent": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, retry exponent"
      },
      "type": "string"
    },
    "cloudProviderBackoffJitter": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, jitter factor between retries"
      },
      "type": "string"
    },
    "cloudProviderBackoffRetries": {
      "defaultValue": "",
      "metadata": {
        "description": "If backoff enabled, how many times to retry"
      },
      "type": "string"
    },
    "cloudProviderRatelimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Enable cloudprovider rate limiting?"
      },
      "type": "string"
    },
    "cloudProviderRatelimitBucket": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, bucket size"
      },
      "type": "string"
    },
    "cloudProviderRatelimitQPS": {
      "defaultValue": "",
      "metadata": {
        "description": "If rate limiting enabled, target maximum QPS"
      },
      "type": "string"
    },
    "cniPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/cni-plugins-amd64-latest.tgz",
      "type": "string"
    },
    "dockerBridgeCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Docker bridge network IP address and subnet"
      },
      "type": "string"
    },
    "dockerEngineDownloadRepo": {
      "defaultValue": "https://aptdocker.azureedge.net/repo",
      "metadata": {
        "description": "The docker engine download url for kubernetes."
      },
      "type": "string"
    },
    "dockerEngineVersion": {
      "allowedValues": [
        "17.05.*",
        "17.04.*",
        "17.03.*",
        "1.13.*",
        "1.12.*",
        "1.11.*"
      ],
      "defaultValue": "",
      "metadata": {
        "description": "The docker engine version to install."
      },
      "type": "string"
    },
    "etcdClientCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "etcdClientPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "etcdDiskSizeGB": {
      "defaultValue": "",
      "metadata": {
        "description": "Size in GB to allocate for etcd volume"
      },
      "type": "string"
    },
    "etcdDownloadURLBase": {
      "defaultValue": "",
      "metadata": {
        "description": "etcd image base URL"
      },
      "type": "string"
    },
    "etcdPeerCertificates": {
      "metadata": {
        "description": "The base 64 server certificates used on the master"
      },
      "type": "array"
    },
    "etcdPeerPrivateKeys": {
      "metadata": {
        "description": "The base 64 server private keys used on the master."
      },
      "type": "array"
    },
    "etcdServerCertificate": {
      "metadata": {
        "description": "The base 64 server certificate used on the master"
      },
      "type": "string"
    },
    "etcdServerPrivateKey": {
      "metadata": {
        "description": "The base 64 server private key used on the master."
      },
      "type": "securestring"
    },
    "etcdVersion": {
      "defaultValue": "",
      "metadata": {
        "description": "etcd version"
      },
      "type": "string"
    },
    "firstConsecutiveStaticIP": {
      "defaultValue": "10.0.0.5",
      "metadata": {
        "description": "Sets the static IP of the first master"
      },
      "type": "string"
    },
    "fqdnEndpointSuffix": {
      "defaultValue": "cloudapp.azure.com",
      "metadata": {
        "description": "Endpoint of FQDN."
      },
      "type": "string"
    },
    "gcHighThreshold": {
      "defaultValue": 85,
      "metadata": {
        "description": "High Threshold for Image Garbage collection on each node"
      },
      "type": "int"
    },
    "gcLowThreshold": {
      "defaultValue": 80,
      "metadata": {
        "description": "Low Threshold for Image Garbage collection on each node."
      },
      "type": "int"
    },
    "generatorCode": {
      "defaultValue": "",
      "metadata": {
        "description": "The generator code used to identify the generator"
      },
      "type": "string"
    },
    "kubeBinariesSASURL": {
      "defaultValue": "",
      "metadata": {
        "description": "The download url for kubernetes windows binaries."
      },
      "type": "string"
    },
    "kubeBinariesVersion": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes windows binaries version"
      },
      "type": "string"
    },
    "kubeClusterCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes cluster subnet"
      },
      "type": "string"
    },
    "kubeConfigCertificate": {
      "metadata": {
        "description": "The base 64 certificate used by cli to communicate with the master"
      },
      "type": "string"
    },
    "kubeConfigPrivateKey": {
      "metadata": {
        "description": "The base 64 private key used by cli to communicate with the master"
      },
      "type": "securestring"
    },
    "kubeDNSServiceIP": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes DNS IP"
      },
      "type": "string"
    },
    "kubeServiceCidr": {
      "defaultValue": "",
      "metadata": {
        "description": "Kubernetes service address space"
      },
      "type": "string"
    },
    "kubernetesACIConnectorCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector CPU Limit"
      },
      "type": "string"
    },
    "kubernetesACIConnectorCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector CPU Requests"
      },
      "type": "string"
    },
    "kubernetesACIConnectorClientId": {
      "defaultValue": "",
      "metadata": {
        "description": "Client id for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorClientKey": {
      "defaultValue": "",
      "metadata": {
        "description": "Client key for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector Memory Limit"
      },
      "type": "string"
    },
    "kubernetesACIConnectorMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "ACI Connector Memory Requests"
      },
      "type": "string"
    },
    "kubernetesACIConnectorNodeName": {
      "defaultValue": "",
      "metadata": {
        "description": "Node name for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorOS": {
      "defaultValue": "",
      "metadata": {
        "description": "OS for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorRegion": {
      "defaultValue": "",
      "metadata": {
        "description": "Region for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorResourceGroup": {
      "defaultValue": "",
      "metadata": {
        "description": "Resource group for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorSubscriptionId": {
      "defaultValue": "",
      "metadata": {
        "description": "Subscription id for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorTaint": {
      "defaultValue": "",
      "metadata": {
        "description": "Taint for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesACIConnectorTenantId": {
      "defaultValue": "",
      "metadata": {
        "description": "Tenant id for ACI Connector."
      },
      "type": "string"
    },
    "kubernetesAddonManagerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesAddonResizerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for addon-resizer."
      },
      "type": "string"
    },
    "kubernetesCcmImageSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for cloud-controller-manager."
      },
      "type": "string"
    },
    "kubernetesDNSMasqSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kube-dnsmasq-amd64."
      },
      "type": "string"
    },
    "kubernetesDashboardCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard CPU Limit."
      },
      "type": "string"
    },
    "kubernetesDashboardCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard CPU Requests."
      },
      "type": "string"
    },
    "kubernetesDashboardMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard Memory Limit."
      },
      "type": "string"
    },
    "kubernetesDashboardMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Dashboard Memory Requests."
      },
      "type": "string"
    },
    "kubernetesDashboardSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubernetes-dashboard-amd64."
      },
      "type": "string"
    },
    "kubernetesExecHealthzSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for exechealthz-amd64."
      },
      "type": "string"
    },
    "kubernetesHeapsterSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for heapster."
      },
      "type": "string"
    },
    "kubernetesHyperkubeSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for hyperkube."
      },
      "type": "string"
    },
    "kubernetesKubeDNSSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for kubedns-amd64."
      },
      "type": "string"
    },
    "kubernetesNonMasqueradeCidr": {
      "metadata": {
        "description": "kubernetesNonMasqueradeCidr cluster subnet"
      },
      "type": "string"
    },
    "kubernetesPodInfraContainerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for pod infra."
      },
      "type": "string"
    },
    "kubernetesReschedulerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler CPU Limit."
      },
      "type": "string"
    },
    "kubernetesReschedulerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler CPU Requests."
      },
      "type": "string"
    },
    "kubernetesReschedulerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler Memory Limit."
      },
      "type": "string"
    },
    "kubernetesReschedulerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Rescheduler Memory Requests."
      },
      "type": "string"
    },
    "kubernetesReschedulerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for rescheduler."
      },
      "type": "string"
    },
    "kubernetesTillerCPULimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Limit."
      },
      "type": "string"
    },
    "kubernetesTillerCPURequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller CPU Requests."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryLimit": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Limit."
      },
      "type": "string"
    },
    "kubernetesTillerMemoryRequests": {
      "defaultValue": "",
      "metadata": {
        "description": "Helm Tiller Memory Requests."
      },
      "type": "string"
    },
    "kubernetesTillerSpec": {
      "defaultValue": "",
      "metadata": {
        "description": "The container spec for Helm Tiller."
      },
      "type": "string"
    },
    "linuxAdminUsername": {
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      },
      "type": "string"
    },
    "location": {
      "defaultValue": "",
      "metadata": {
        "description": "Sets the location for all resources in the cluster"
      },
      "type": "string"
    },
    "masterEndpointDNSNamePrefix": {
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      },
      "type": "string"
    },
    "masterOffset": {
      "allowedValues": [
        0,
        1,
        2,
        3,
        4
      ],
      "defaultValue": 0,
      "metadata": {
        "description": "The offset into the master pool where to start creating master VMs.  This value can be from 0 to 4, but must be less than masterCount."
      },
      "type": "int"
    },
    "masterVMSize": {
      "allowedValues": [
        "Standard_A10",
        "Standard_A11",
        "Standard_A2",
        "Standard_A2_v2",
        "Standard_A2m_v2",
        "Standard_A3",
        "Standard_A4",
        "Standard_A4_v2",
        "Standard_A4m_v2",
        "Standard_A5",
        "Standard_A6",
        "Standard_A7",
        "Standard_A8",
        "Standard_A8_v2",
        "Standard_A8m_v2",
        "Standard_A9",
        "Standard_B2ms",
        "Standard_B2s",
        "Standard_B4ms",
        "Standard_B8ms",
        "Standard_D11",
        "Standard_D11_v2",
        "Standard_D11_v2_Promo",
        "Standard_D12",
        "Standard_D12_v2",
        "Standard_D12_v2_Promo",
        "Standard_D13",
        "Standard_D13_v2",
        "Standard_D13_v2_Promo",
        "Standard_D14",
        "Standard_D14_v2",
        "Standard_D14_v2_Promo",
        "Standard_D15_v2",
        "Standard_D16_v3",
        "Standard_D16s_v3",
        "Standard_D2",
        "Standard_D2_v2",
        "Standard_D2_v2_Promo",
        "Standard_D2_v3",
        "Standard_D2s_v3",
        "Standard_D3",
        "Standard_D32_v3",
        "Standard_D32s_v3",
        "Standard_D3_v2",
        "Standard_D3_v2_Promo",
        "Standard_D4",
        "Standard_D4_v2",
        "Standard_D4_v2_Promo",
        "Standard_D4_v3",
        "Standard_D4s_v3",
        "Standard_D5_v2",
        "Standard_D5_v2_Promo",
        "Standard_D64_v3",
        "Standard_D64s_v3",
        "Standard_D8_v3",
        "Standard_D8s_v3",
        "Standard_DS11",
        "Standard_DS11_v2",
        "Standard_DS11_v2_Promo",
        "Standard_DS12",
        "Standard_DS12_v2",
        "Standard_DS12_v2_Promo",
        "Standard_DS13",
        "Standard_DS13-2_v2",
        "Standard_DS13-4_v2",
        "Standard_DS13_v2",
        "Standard_DS13_v2_Promo",
        "Standard_DS14",
        "Standard_DS14-4_v2",
        "Standard_DS14-8_v2",
        "Standard_DS14_v2",
        "Standard_DS14_v2_Promo",
        "Standard_DS15_v2",
        "Standard_DS2",
        "Standard_DS2_v2",
        "Standard_DS2_v2_Promo",
        "Standard_DS3",
        "Standard_DS3_v2",
        "Standard_DS3_v2_Promo",
        "Standard_DS4",
        "Standard_DS4_v2",
        "Standard_DS4_v2_Promo",
        "Standard_DS5_v2",
        "Standard_DS5_v2_Promo",
        "Standard_E16_v3",
        "Standard_E16s_v3",
        "Standard_E2_v3",
        "Standard_E2s_v3",
        "Standard_E32-16s_v3",
        "Standard_E32-8s_v3",
        "Standard_E32_v3",
        "Standard_E32s_v3",
        "Standard_E4_v3",
        "Standard_E4s_v3",
        "Standard_E64-16s_v3",
        "Standard_E64-32s_v3",
        "Standard_E64_v3",
        "Standard_E64s_v3",
        "Standard_E8_v3",
        "Standard_E8s_v3",
        "Standard_F16",
        "Standard_F16s",
        "Standard_F16s_v2",
        "Standard_F2",
        "Standard_F2s",
        "Standard_F2s_v2",
        "Standard_F32s_v2",
        "Standard_F4",
        "Standard_F4s",
        "Standard_F4s_v2",
        "Standard_F64s_v2",
        "Standard_F72s_v2",
        "Standard_F8",
        "Standard_F8s",
        "Standard_F8s_v2",
        "Standard_G1",
        "Standard_G2",
        "Standard_G3",
        "Standard_G4",
        "Standard_G5",
        "Standard_GS1",
        "Standard_GS2",
        "Standard_GS3",
        "Standard_GS4",
        "Standard_GS4-4",
        "Standard_GS4-8",
        "Standard_GS5",
        "Standard_GS5-16",
        "Standard_GS5-8",
        "Standard_H16",
        "Standard_H16m",
        "Standard_H16mr",
        "Standard_H16r",
        "Standard_H8",
        "Standard_H8m",
        "Standard_L16s",
        "Standard_L32s",
        "Standard_L4s",
        "Standard_L8s",
        "Standard_M128-32ms",
        "Standard_M128-64ms",
        "Standard_M128ms",
        "Standard_M128s",
        "Standard_M64-16ms",
        "Standard_M64-32ms",
        "Standard_M64ms",
        "Standard_M64s",
        "Standard_NC12",
        "Standard_NC12s_v2",
        "Standard_NC12s_v3",
        "Standard_NC24",
        "Standard_NC24r",
        "Standard_NC24rs_v2",
        "Standard_NC24rs_v3",
        "Standard_NC24s_v2",
        "Standard_NC24s_v3",
        "Standard_NC6",
        "Standard_NC6s_v2",
        "Standard_NC6s_v3",
        "Standard_ND12s",
        "Standard_ND24rs",
        "Standard_ND24s",
        "Standard_ND6s",
        "Standard_NV12",
        "Standard_NV24",
        "Standard_NV6"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine."
      },
      "type": "string"
    },
    "masterVnetSubnetID": {
      "metadata": {
        "description": "Sets the vnet subnet of the master."
      },
      "type": "string"
    },
    "maxPods": {
      "defaultValue": 110,
      "metadata": {
        "description": "The maximum number of pods per node."
      },
      "type": "int"
    },
    "nameSuffix": {
      "defaultValue": "18238956",
      "metadata": {
        "description": "A string hash of the master DNS name to uniquely identify the cluster."
      },
      "type": "string"
    },
    "networkPolicy": {
      "allowedValues": [
        "none",
        "azure",
        "calico"
      ],
      "defaultValue": "none",
      "metadata": {
        "description": "The network policy enforcement to use (none|azure|calico)"
      },
      "type": "string"
    },
    "orchestratorName": {
      "defaultValue": "",
      "maxLength": 3,
      "metadata": {
        "description": "The orchestrator name used to identify the orchestrator.  This must be no more than 3 digits in length, otherwise it will exceed Windows Naming"
      },
      "minLength": 3,
      "type": "string"
    },
    "osImageOffer": {
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Linux OS image type."
      },
      "type": "string"
    },
    "osImagePublisher": {
      "defaultValue": "Canonical",
      "metadata": {
        "description": "OS image publisher."
      },
      "type": "string"
    },
    "osImageSKU": {
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "OS image SKU."
      },
      "type": "string"
    },
    "osImageVersion": {
      "defaultValue": "16.04.201801050",
      "metadata": {
        "description": "OS image version."
      },
      "type": "string"
    },
    "servicePrincipalClientId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring"
    },
    "servicePrincipalClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring"
    },
    "sshRSAPublicKey": {
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      },
      "type": "string"
    },
    "targetEnvironment": {
      "defaultValue": "AzurePublicCloud",
      "metadata": {
        "description": "The azure deploy environment. Currently support: AzurePublicCloud, AzureChinaCloud"
      },
      "type": "string"
    },
    "vnetCidr": {
      "defaultValue": "10.0.0.0/8",
      "metadata": {
        "description": "Cluster vnet cidr"
      },
      "type": "string"
    },
    "vnetCniLinuxPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-linux-amd64-latest.tgz",
      "type": "string"
    },
    "vnetCniWindowsPluginsURL": {
      "defaultValue": "https://acs-mirror.azureedge.net/cni/azure-vnet-cni-windows-amd64-latest.zip",
      "type": "string"
    },
    "windowsAdminPassword": {
      "metadata": {
        "description": "Password for the Windows Swarm Agent Virtual Machines."
      },
      "type": "securestring"
    },
    "windowsAdminUsername": {
      "metadata": {
        "description": "User name for the Windows Swarm Agent Virtual Machines (Password Only Supported)."
      },
      "type": "string"
    },
    "windowsTelemetryGUID": {
      "defaultValue": "",
      "metadata": {
        "description": "The GUID to set in windows agent to collect telemetry data."
      },
      "type": "string"
    }
  },
  "variables": {
    "agentWindowsOffer": "WindowsServerSemiAnnual",
    "agentWindowsPublisher": "MicrosoftWindowsServer",
    "agentWindowsSku": "Datacenter-Core-1709-with-Containers-smalldisk",
    "agentWindowsVersion": "[parameters('agentWindowsVersion')]",
    "agentpool1AvailabilitySet": "[concat('agentpool1-availabilitySet-', variables('nameSuffix'))]",
    "agentpool1Count": "[parameters('agentpool1Count')]",
    "agentpool1Index": 0,
    "agentpool1Offset": "[parameters('agentpool1Offset')]",
    "agentpool1SubnetName": "[parameters('agentpool1VnetSubnetID')]",
    "agentpool1VMNamePrefix": "[concat(variables('orchestratorName'), '-agentpool1-', variables('nameSuffix'), '-')]",
    "agentpool1VMSize": "[parameters('agentpool1VMSize')]",
    "agentpool1VnetParts": "[split(parameters('agentpool1VnetSubnetID'),'/subnets/')]",
    "agentpool1VnetSubnetID": "[parameters('agentpool1VnetSubnetID')]",
    "agentpool1osImageOffer": "[parameters('agentpool1osImageOffer')]",
    "agentpool1osImagePublisher": "[parameters('agentpool1osImagePublisher')]",
    "agentpool1osImageSKU": "[parameters('agentpool1osImageSKU')]",
    "agentpool1osImageVersion": "[parameters('agentpool1osImageVersion')]",
    "agentpool2AvailabilitySet": "[concat('agentpool2-availabilitySet-', variables('nameSuffix'))]",
    "agentpool2Count": "[parameters('agentpool2Count')]",
    "agentpool2Index": 1,
    "agentpool2Offset": "[parameters('agentpool2Offset')]",
    "agentpool2SubnetName": "[parameters('agentpool2VnetSubnetID')]",
    "agentpool2VMNamePrefix": "[concat(variables('winResourceNamePrefix'), variables('orchestratorName'), add(900,variables('agentpool2Index')))]",
    "agentpool2VMSize": "[parameters('agentpool2VMSize')]",
    "agentpool2VnetParts": "[split(parameters('agentpool2VnetSubnetID'),'/subnets/')]",
    "agentpool2VnetSubnetID": "[parameters('agentpool2VnetSubnetID')]",
    "agentpool2osImageOffer": "[parameters('agentpool2osImageOffer')]",
    "agentpool2osImagePublisher": "[parameters('agentpool2osImagePublisher')]",
    "agentpool2osImageSKU": "[parameters('agentpool2osImageSKU')]",
    "agentpool2osImageVersion": "[parameters('agentpool2osImageVersion')]",
    "allocateNodeCidrs": true,
    "apiServerCertificate": "[parameters('apiServerCertificate')]",
    "apiServerPrivateKey": "[parameters('apiServerPrivateKey')]",
    "apiVersionDefault": "2016-03-30",
    "apiVersionLinkDefault": "2015-01-01",
    "apiVersionStorageManagedDisks": "2016-04-30-preview",
    "caCertificate": "[parameters('caCertificate')]",
    "caPrivateKey": "[parameters('caPrivateKey')]",
    "clientCertificate": "[parameters('clientCertificate')]",
    "clientPrivateKey": "[parameters('clientPrivateKey')]",
    "cloudProviderBackoff": "[parameters('cloudProviderBackoff')]",
    "cloudProviderBackoffDuration": "[parameters('cloudProviderBackoffDuration')]",
    "cloudProviderBackoffExponent": "[parameters('cloudProviderBackoffExponent')]",
    "cloudProviderBackoffJitter": "[parameters('cloudProviderBackoffJitter')]",
    "cloudProviderBackoffRetries": "[parameters('cloudProviderBackoffRetries')]",
    "cloudProviderRatelimit": "[parameters('cloudProviderRatelimit')]",
    "cloudProviderRatelimitBucket": "[parameters('cloudProviderRatelimitBucket')]",
    "cloudProviderRatelimitQPS": "[parameters('cloudProviderRatelimitQPS')]",
    "cniPluginsURL": "[parameters('cniPluginsURL')]",
    "contributorRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]",
    "dockerEngineDownloadRepo": "[parameters('dockerEngineDownloadRepo')]",
    "dockerEngineVersion": "[parameters('dockerEngineVersion')]",
    "etcdCaFilepath": "/etc/kubernetes/certs/ca.crt",
    "etcdClientCertFilepath": "/etc/kubernetes/certs/etcdclient.crt",
    "etcdClientCertificate": "[parameters('etcdClientCertificate')]",
    "etcdClientKeyFilepath": "/etc/kubernetes/certs/etcdclient.key",
    "etcdClientPrivateKey": "[parameters('etcdClientPrivateKey')]",
    "etcdDiskSizeGB": "[parameters('etcdDiskSizeGB')]",
    "etcdDownloadURLBase": "[parameters('etcdDownloadURLBase')]",
    "etcdPeerCertFilepath": [
      "/etc/kubernetes/certs/etcdpeer0.crt",
      "/etc/kubernetes/certs/etcdpeer1.crt",
      "/etc/kubernetes/certs/etcdpeer2.crt",
      "/etc/kubernetes/certs/etcdpeer3.crt",
      "/etc/kubernetes/certs/etcdpeer4.crt"
    ],
    "etcdPeerCertificates": "[parameters('etcdPeerCertificates')]",
    "etcdPeerKeyFilepath": [
      "/etc/kubernetes/certs/etcdpeer0.key",
      "/etc/kubernetes/certs/etcdpeer1.key",
      "/etc/kubernetes/certs/etcdpeer2.key",
      "/etc/kubernetes/certs/etcdpeer3.key",
      "/etc/kubernetes/certs/etcdpeer4.key"
    ],
    "etcdPeerPrivateKeys": "[parameters('etcdPeerPrivateKeys')]",
    "etcdServerCertFilepath": "/etc/kubernetes/certs/etcdserver.crt",
    "etcdServerCertificate": "[parameters('etcdServerCertificate')]",
    "etcdServerKeyFilepath": "/etc/kubernetes/certs/etcdserver.key",
    "etcdServerPrivateKey": "[parameters('etcdServerPrivateKey')]",
    "etcdVersion": "[parameters('etcdVersion')]",
    "fqdnEndpointSuffix": "[parameters('fqdnEndpointSuffix')]",
    "gcHighThreshold": "[parameters('gcHighThreshold')]",
    "gcLowThreshold": "[parameters('gcLowThreshold')]",
    "generateProxyCertsScript": "H4sIAAAAAAAA/5RWYW/bNhT8rl9xjY06AarJTpo0TeBthqqhQbq2UzxgwTYItPRscZYoh6TrGG3++0DZliVHUrd8ish3947vjoQ7L5wJF86EqdiyPvuf/rgP3FFw690Pj7pfy99XQ0enC2chs8e1HSachLZD9sOc1k9HO6A/LqH8cQMklHoP+XDjfRwf9CvWagiqDTeV7p3/DO3e+XXoUMln6IrqYq0WnSv3xu67wPd++927G7/3Ru88v4CNDFPb/tVwwxiS1MqR9LAkpWNiEcn9hOwpT2jXaKvL26g8WKrSVQdNUtcQbSddXWmhmdN6x3J7eRcUiXD9cfDLzQfv82j83hA2bl4NHdKhM19OSArSpJxKl10c9vhb776BubzTSrsNSUlTs9r/KnWr0+pgRoIk0wSZZRruyMoWJJRKzIZUDHa21OiW7w5O+68vizJJD7AFrWA/nvffwo7YWmFweXoBM+0DZIXMH8NWy8k/6Dnux2Euy81tcke9sjBDbqS3KituWZO6sph9cQ2He+eXdbHZTNKM6Uw6n4ZqrTSlVylTmqTqFW02R8+b5ed/c9aHzUUdszuqDMAd1UxJkQ4USc4S9E9rNfpjy5Kk5TpMo4BPgynjyVLS8Qm+YppJcHCBAU5xhtc4xwXe4BJvMehfI8rQ/fkaf6L7E2x6QB/4Gy9fYiKJzfHtG1RCtMBZXioI13iyrJXkmoI8QIHOgoiruellAQDpMAq1sUWj2/Zc4Ed0G29WA1VxV6rg8uVpRZp35aDvYdMOfEqzL4RVzDWpBQsJCxZFXMzANCY040KYj2yKgdJIuKAcqCiCzdEbKOcv5Ti9ltM1CWg9UxinWYSLfr+xqt6ZYMV1HOTxKExqDQUGAwxOjd95rfmroS32vhed87zShMcI7GCSZOEcS6F5ApYkuVfgCpJYtK6LceFmmCzNTbNjYomOrQ5+ZfPNLua0Vq+wswkJsfy/kocTCtlSbctXmehpsDCkhQbDF5ZAxzt3FczEwNCzeziO14uYxMkLi08LIen8O9E+Qvc4ZBqlHwxPJ0fX0DGJSkALpn2yn2GL9+np5KgNnIe7Ab0RsMlpyZX2uFgd3EyN5rzjpmGYpSkTEYw3FL3ajC0lJlReaJ4vluRWgh650sqiRNH/bTzl/wYAAP//es/k7bwJAAA=",
    "generatorCode": "[parameters('generatorCode')]",
    "kubeBinariesSASURL": "[parameters('kubeBinariesSASURL')]",
    "kubeBinariesVersion": "[parameters('kubeBinariesVersion')]",
    "kubeClusterCidr": "[parameters('kubeClusterCidr')]",
    "kubeConfigCertificate": "[parameters('kubeConfigCertificate')]",
    "kubeConfigPrivateKey": "[parameters('kubeConfigPrivateKey')]",
    "kubeDNSServiceIP": "[parameters('kubeDNSServiceIP')]",
    "kubeServiceCidr": "[parameters('kubeServiceCidr')]",
    "kubernetesACIConnectorCPULimit": "[parameters('kubernetesACIConnectorCPULimit')]",
    "kubernetesACIConnectorCPURequests": "[parameters('kubernetesACIConnectorCPURequests')]",
    "kubernetesACIConnectorClientId": "[parameters('kubernetesACIConnectorClientId')]",
    "kubernetesACIConnectorClientKey": "[parameters('kubernetesACIConnectorClientKey')]",
    "kubernetesACIConnectorMemoryLimit": "[parameters('kubernetesACIConnectorMemoryLimit')]",
    "kubernetesACIConnectorMemoryRequests": "[parameters('kubernetesACIConnectorMemoryRequests')]",
    "kubernetesACIConnectorNodeName": "[parameters('kubernetesACIConnectorNodeName')]",
    "kubernetesACIConnectorOS": "[parameters('kubernetesACIConnectorOS')]",
    "kubernetesACIConnectorRegion": "[parameters('kubernetesACIConnectorRegion')]",
    "kubernetesACIConnectorResourceGroup": "[parameters('kubernetesACIConnectorResourceGroup')]",
    "kubernetesACIConnectorSpec": "[parameters('kubernetesACIConnectorSpec')]",
    "kubernetesACIConnectorSubscriptionId": "[parameters('kubernetesACIConnectorSubscriptionId')]",
    "kubernetesACIConnectorTaint": "[parameters('kubernetesACIConnectorTaint')]",
    "kubernetesACIConnectorTenantId": "[parameters('kubernetesACIConnectorTenantId')]",
    "kubernetesAPIServerIP": "[parameters('firstConsecutiveStaticIP')]",
    "kubernetesAddonManagerSpec": "[parameters('kubernetesAddonManagerSpec')]",
    "kubernetesAddonResizerSpec": "[parameters('kubernetesAddonResizerSpec')]",
    "kubernetesCcmImageSpec": "[parameters('kubernetesCcmImageSpec')]",
    "kubernetesDNSMasqSpec": "[parameters('kubernetesDNSMasqSpec')]",
    "kubernetesDashboardCPULimit": "[parameters('kubernetesDashboardCPULimit')]",
    "kubernetesDashboardCPURequests": "[parameters('kubernetesDashboardCPURequests')]",
    "kubernetesDashboardMemoryLimit": "[parameters('kubernetesDashboardMemoryLimit')]",
    "kubernetesDashboardMemoryRequests": "[parameters('kubernetesDashboardMemoryRequests')]",
    "kubernetesDashboardSpec": "[parameters('kubernetesDashboardSpec')]",
    "kubernetesExecHealthzSpec": "[parameters('kubernetesExecHealthzSpec')]",
    "kubernetesHeapsterSpec": "[parameters('kubernetesHeapsterSpec')]",
    "kubernetesHyperkubeSpec": "[parameters('kubernetesHyperkubeSpec')]",
    "kubernetesKubeDNSSpec": "[parameters('kubernetesKubeDNSSpec')]",
    "kubernetesNonMasqueradeCidr": "[parameters('kubernetesNonMasqueradeCidr')]",
    "kubernetesPodInfraContainerSpec": "[parameters('kubernetesPodInfraContainerSpec')]",
    "kubernetesReschedulerCPULimit": "[parameters('kubernetesReschedulerCPULimit')]",
    "kubernetesReschedulerCPURequests": "[parameters('kubernetesReschedulerCPURequests')]",
    "kubernetesReschedulerMemoryLimit": "[parameters('kubernetesReschedulerMemoryLimit')]",
    "kubernetesReschedulerMemoryRequests": "[parameters('kubernetesReschedulerMemoryRequests')]",
    "kubernetesReschedulerSpec": "[parameters('kubernetesReschedulerSpec')]",
    "kubernetesTillerCPULimit": "[parameters('kubernetesTillerCPULimit')]",
    "kubernetesTillerCPURequests": "[parameters('kubernetesTillerCPURequests')]",
    "kubernetesTillerMemoryLimit": "[parameters('kubernetesTillerMemoryLimit')]",
    "kubernetesTillerMemoryRequests": "[parameters('kubernetesTillerMemoryRequests')]",
    "kubernetesTillerSpec": "[parameters('kubernetesTillerSpec')]",
    "labelResourceGroup": "[if(or(or(endsWith(variables('truncatedResourceGroup'), '-'), endsWith(variables('truncatedResourceGroup'), '_')), endsWith(variables('truncatedResourceGroup'), '.')), concat(take(variables('truncatedResourceGroup'), 62), 'z'), variables('truncatedResourceGroup'))]",
    "location": "[variables('locations')[mod(add(2,length(parameters('location'))),add(1,length(parameters('location'))))]]",
    "locations": [
      "[resourceGroup().location]",
      "[parameters('location')]"
    ],
    "masterAvailabilitySet": "[concat('master-availabilityset-', variables('nameSuffix'))]",
    "masterCount": 1,
    "masterEtcdClientPort": 2379,
    "masterEtcdClientURLs": [
      "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdClientPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdClientPort'))]"
    ],
    "masterEtcdClusterStates": [
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2])]",
      "[concat(variables('masterVMNames')[0], '=', variables('masterEtcdPeerURLs')[0], ',', variables('masterVMNames')[1], '=', variables('masterEtcdPeerURLs')[1], ',', variables('masterVMNames')[2], '=', variables('masterEtcdPeerURLs')[2], ',', variables('masterVMNames')[3], '=', variables('masterEtcdPeerURLs')[3], ',', variables('masterVMNames')[4], '=', variables('masterEtcdPeerURLs')[4])]"
    ],
    "masterEtcdPeerURLs": [
      "[concat('https://', variables('masterPrivateIpAddrs')[0], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[1], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[2], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[3], ':', variables('masterEtcdServerPort'))]",
      "[concat('https://', variables('masterPrivateIpAddrs')[4], ':', variables('masterEtcdServerPort'))]"
    ],
    "masterEtcdServerPort": 2380,
    "masterFirstAddrComment": "these MasterFirstAddrComment are used to place multiple masters consecutively in the address space",
    "masterFirstAddrOctet4": "[variables('masterFirstAddrOctets')[3]]",
    "masterFirstAddrOctets": "[split(parameters('firstConsecutiveStaticIP'),'.')]",
    "masterFirstAddrPrefix": "[concat(variables('masterFirstAddrOctets')[0],'.',variables('masterFirstAddrOctets')[1],'.',variables('masterFirstAddrOctets')[2],'.')]",
    "masterFqdnPrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterOffset": "[parameters('masterOffset')]",
    "masterPrivateIp": "[parameters('firstConsecutiveStaticIP')]",
    "masterPrivateIpAddrs": [
      "[concat(variables('masterFirstAddrPrefix'), add(0, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(1, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(2, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(3, int(variables('masterFirstAddrOctet4'))))]",
      "[concat(variables('masterFirstAddrPrefix'), add(4, int(variables('masterFirstAddrOctet4'))))]"
    ],
    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterFqdnPrefix'), '-', variables('nameSuffix'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterVMNames": [
      "[concat(variables('masterVMNamePrefix'), '0')]",
      "[concat(variables('masterVMNamePrefix'), '1')]",
      "[concat(variables('masterVMNamePrefix'), '2')]",
      "[concat(variables('masterVMNamePrefix'), '3')]",
      "[concat(variables('masterVMNamePrefix'), '4')]"
    ],
    "masterVMSize": "[parameters('masterVMSize')]",
    "maxPods": "[parameters('maxPods')]",
    "maxVMsPerPool": 100,
    "mountetcdScript": "H4sIAAAAAAAA/3RSUW8TPRB896+YL8nb14uTgioVKUWVACmCNhWEJ4Qqn713Z+LYx3ndpgX+O/IlTQ8J7uXkHe/M7HjH/8nSelmq2IgxrkLybH0NG2GCJzTUEayPTMogVCDWBiVplSLlc5lqNMxtfCVlmeo4dSp53bTKTD2x1C4kU1hvWf5fplrOz85PZ+cvxBgrrwncUM9gIyq7I3OCjlqnnhBy4R73lpv+2HMhc0E3ytcUn27n6tFFbblJ5VSHrbx8TB1JpWNBvraeZJuck2dn86mIxCh24s3y0/uFNHQno9Hi5vLjerlerq4Xkx8Z+TUXV6vP1+ub1fJ6vZB3qpPOljJnYGzciGToTpktIjE7EtuNsR2KFpPnLrHNieIn6o7+BGyFL5i8RkHfMcNXwQ15AQCkm4BRFsi5KNeRMg/oeciM9ld2ljETlRVjVNY5ZE+yiqxK0QuNnmaaj4bYUdPT3zQnxwCw/wZ+DxWVOOS/oUolx/HEh0pZd0Bnh//pCBcXQ+HeqW5Ib2ArtKpjyzb4PEjkKFzEs/a/XY4HnSZQhA+8p+hhGfMmx7qPrig83WOOSX7IAbzdVHFKO345UETxoV/s233nOxRv4dTjw61lVTq6zTu3mJ/0pW8hdV65Qy0Ptn/hQVS/AwAA//8o5bmvUwMAAA==",
    "nameSuffix": "[parameters('nameSuffix')]",
    "networkPolicy": "[parameters('networkPolicy')]",
    "nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
    "nsgName": "[concat(variables('masterVMNamePrefix'), 'nsg')]",
    "orchestratorName": "[parameters('orchestratorName')]",
    "orchestratorNameVersionTag": "Kubernetes:1.8.7",
    "osImageOffer": "[parameters('osImageOffer')]",
    "osImagePublisher": "[parameters('osImagePublisher')]",
    "osImageSKU": "[parameters('osImageSKU')]",
    "osImageVersion": "[parameters('osImageVersion')]",
    "primaryAvailabilitySetName": "[concat('agentpool1-availabilitySet-',variables('nameSuffix'))]",
    "provisionScript": "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",
    "provisionScriptParametersCommon": "[concat('TENANT_ID=',variables('tenantID'),' APISERVER_PUBLIC_KEY=',variables('apiserverCertificate'),' SUBSCRIPTION_ID=',variables('subscriptionId'),' RESOURCE_GROUP=',variables('resourceGroup'),' LOCATION=',variables('location'),' SUBNET=',variables('subnetName'),' NETWORK_SECURITY_GROUP=',variables('nsgName'),' VIRTUAL_NETWORK=',variables('virtualNetworkName'),' VIRTUAL_NETWORK_RESOURCE_GROUP=',variables('virtualNetworkResourceGroupName'),' ROUTE_TABLE=',variables('routeTableName'),' PRIMARY_AVAILABILITY_SET=',variables('primaryAvailabilitySetName'),' SERVICE_PRINCIPAL_CLIENT_ID=',variables('servicePrincipalClientId'),' SERVICE_PRINCIPAL_CLIENT_SECRET=',variables('servicePrincipalClientSecret'),' KUBELET_PRIVATE_KEY=',variables('clientPrivateKey'),' TARGET_ENVIRONMENT=',variables('targetEnvironment'),' NETWORK_POLICY=',variables('networkPolicy'),' FQDNSuffix=',variables('fqdnEndpointSuffix'),' VNET_CNI_PLUGINS_URL=',variables('vnetCniLinuxPluginsURL'),' CNI_PLUGINS_URL=',variables('cniPluginsURL'),' MAX_PODS=',variables('maxPods'),' CLOUDPROVIDER_BACKOFF=',variables('cloudProviderBackoff'),' CLOUDPROVIDER_BACKOFF_RETRIES=',variables('cloudProviderBackoffRetries'),' CLOUDPROVIDER_BACKOFF_EXPONENT=',variables('cloudProviderBackoffExponent'),' CLOUDPROVIDER_BACKOFF_DURATION=',variables('cloudProviderBackoffDuration'),' CLOUDPROVIDER_BACKOFF_JITTER=',variables('cloudProviderBackoffJitter'),' CLOUDPROVIDER_RATELIMIT=',variables('cloudProviderRatelimit'),' CLOUDPROVIDER_RATELIMIT_QPS=',variables('cloudProviderRatelimitQPS'),' CLOUDPROVIDER_RATELIMIT_BUCKET=',variables('cloudProviderRatelimitBucket'),' USE_MANAGED_IDENTITY_EXTENSION=',variables('useManagedIdentityExtension'),' USE_INSTANCE_METADATA=',variables('useInstanceMetadata'))]",
    "provisionScriptParametersMaster": "[concat('APISERVER_PRIVATE_KEY=',variables('apiServerPrivateKey'),' CA_CERTIFICATE=',variables('caCertificate'),' CA_PRIVATE_KEY=',variables('caPrivateKey'),' MASTER_FQDN=',variables('masterFqdnPrefix'),' KUBECONFIG_CERTIFICATE=',variables('kubeConfigCertificate'),' KUBECONFIG_KEY=',variables('kubeConfigPrivateKey'),' ETCD_SERVER_CERTIFICATE=',variables('etcdServerCertificate'),' ETCD_CLIENT_CERTIFICATE=',variables('etcdClientCertificate'),' ETCD_SERVER_PRIVATE_KEY=',variables('etcdServerPrivateKey'),' ETCD_CLIENT_PRIVATE_KEY=',variables('etcdClientPrivateKey'),' ETCD_PEER_CERTIFICATES=',string(variables('etcdPeerCertificates')),' ETCD_PEER_PRIVATE_KEYS=',string(variables('etcdPeerPrivateKeys')),' ADMINUSER=',variables('username'))]",
    "readerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "registerWithTaints": "node-role.kubernetes.io/master=true:NoSchedule",
    "resourceGroup": "[resourceGroup().name]",
    "routeTableID": "[resourceId('Microsoft.Network/routeTables', variables('routeTableName'))]",
    "routeTableName": "[concat(variables('masterVMNamePrefix'),'routetable')]",
    "scope": "[resourceGroup().id]",
    "servicePrincipalClientId": "[parameters('servicePrincipalClientId')]",
    "servicePrincipalClientSecret": "[parameters('servicePrincipalClientSecret')]",
    "singleQuote": "'",
    "sshKeyPath": "[concat('/home/',variables('username'),'/.ssh/authorized_keys')]",
    "sshNatPorts": [
      22,
      2201,
      2202,
      2203,
      2204
    ],
    "sshPublicKeyData": "[parameters('sshRSAPublicKey')]",
    "storageAccountBaseName": "",
    "storageAccountPrefixes": [],
    "subnetName": "[split(parameters('masterVnetSubnetID'), '/')[variables('subnetNameResourceSegmentIndex')]]",
    "subnetNameResourceSegmentIndex": 10,
    "subscriptionId": "[subscription().subscriptionId]",
    "targetEnvironment": "[parameters('targetEnvironment')]",
    "tenantId": "[subscription().tenantId]",
    "truncatedResourceGroup": "[take(replace(replace(resourceGroup().name, '(', '-'), ')', '-'), 63)]",
    "useInstanceMetadata": "true",
    "useManagedIdentityExtension": "false",
    "username": "[parameters('linuxAdminUsername')]",
    "virtualNetworkName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetNameResourceSegmentIndex')]]",
    "virtualNetworkResourceGroupName": "[split(parameters('masterVnetSubnetID'), '/')[variables('vnetResourceGroupNameResourceSegmentIndex')]]",
    "vnetCidr": "[parameters('vnetCidr')]",
    "vnetCniLinuxPluginsURL": "[parameters('vnetCniLinuxPluginsURL')]",
    "vnetCniWindowsPluginsURL": "[parameters('vnetCniWindowsPluginsURL')]",
    "vnetNameResourceSegmentIndex": 8,
    "vnetResourceGroupNameResourceSegmentIndex": 4,
    "vnetSubnetID": "[parameters('masterVnetSubnetID')]",
    "winResourceNamePrefix": "[substring(variables('nameSuffix'), 0, 5)]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsCustomScriptSuffix": " $inputFile = '%SYSTEMDRIVE%\\AzureData\\CustomData.bin' ; $outputFile = '%SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.ps1' ; Copy-Item $inputFile $outputFile ; Invoke-Expression('{0} {1}' -f $outputFile, $arguments) ; ",
    "windowsTelemetryGUID": "[parameters('windowsTelemetryGUID')]"
  },
  "resources": [
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('nsgID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "primary": true,
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentpool1VnetSubnetID')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgID')]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool1AvailabilitySet')]",
      "properties": {
        "managed": "true",
        "platformFaultDomainCount": "2",
        "platformUpdateDomainCount": "3"
      },
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool1AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool1AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool1VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool1VMNamePrefix'), 'nic-', copyIndex(variables('agentpool1Offset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
          "customData": "[base64(concat('#cloud-config\n\nwrite_files:\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: https://',variables('kubernetesAPIServerIP'),':443\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n    \n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cgroups-per-qos=false --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable= --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.0.0.0/8 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.0 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    DOCKER_OPTS=\n    KUBELET_REGISTER_SCHEDULABLE=true\n    KUBELET_NODE_LABELS=kubernetes.io/role=agent,agentpool=agentpool1,storageprofile=managed,storagetier=Standard_LRS,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),',services=linux\n\n    KUBELET_NON_MASQUERADE_CIDR=',variables('kubernetesNonMasqueradeCidr'),'\n    KUBELET_FEATURE_GATES=--feature-gates=Accelerators=true\n\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xUTXPiRhO+61d0YR/e9zAo2K5koy0dsJEdyl8bhGsPtosapEZMMRppe3pgSZb/nhKSHRB4KxdVz9P99DP9oXl+MopfvQHahFTJqjDhrZuiRvZG+M0pQhumRbJA6lqkpUrQ688YqQ16z3FtvXojtCyJQ6lXcm29yCwVFSZHw9dKY+gjJ36KM+k0+4tGK3ZJgtZG3xXHLNnZsHdx7kXfMYmrXF8IQ3+qjD+Vdg5+UbIv/3KEflIYlsog2bdUXTs/wssXqSIQJfhLSb5W03flDzREAh01g2c4/V9eOMPwAzLCEl467QwvHfgBqwSE/j8IjfALvMJn4DkaqKW3dCGmyqQH8ofAZ5ipzrEKmjS5XKCwc0l4mM07gfFcWVAWJJSSWEkNq4IWkgpnUuACuPK70jKhzKEaNRlkrDjWYeCdAMyZSxv4fqZ47qbdpMi3+eu4XXNLsf5F7/feryfbQ1Lk1ZzFee/s4uzTb+e9ViG2qsSubcIaxAoMcleVy4suJ+WEkEmhPQs/7ZNEzcIpy6lGC4LByKoTWlk+GqrKn4eGvrO0bWq9xEDOwIsHIIRBDueF5eZYqnTvSGqpNGaYNgDljbEstMsx9FNcBtWnBdu1DbYfKlqeaoLkTPBu0OpIRDXj+q5+0AI+JjRLscNokKBZnyO0IgvejYPE1Y+7M/6gBRwWZ2m5T9gHKsLp4PHqNhpNHr+M4w/qWEmZoWH/XhqZYTpM0bDitYiRWZnMBv898uCGrZJquNQuU8a262t5m/YAnP59+3QZ3UXjyfC+fxNtGhjAn69LpCoBvP3db67t8tTvq6h8SWFmKttzo6mWWFQPLNKexxQpCi2nqG3Y+Vf94XEQTe76l9FdvOnsEZbh2c4tr6P++GkUTW764yjetDIbkUv7zSHJFEWiUgp3BR4m9/34z6do1B9Ek6vhYLRPrxsk6g6JVNHPG7zDPX3TuHp8uB7e7Hre5UfRzTAeR6NtoZtjjq/D8R+TcX/4MI43nvc8NJal1q/eV2kY08t1mDvNSjiL1GVJGbL3TwAAAP//hSXGQwAHAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n\n\n\n    exit 0\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n\nruncmd:\n- echo `date`,`hostname`, startruncmd>>/opt/m \n- apt-mark hold walinuxagent\n- echo `date`,`hostname`, preaptupdate>>/opt/m \n- apt-get update\n- echo `date`,`hostname`, postaptupdate>>/opt/m \n- apt-get install -y apt-transport-https ca-certificates nfs-common\n- echo `date`,`hostname`, aptinstall>>/opt/m \n- systemctl enable rpcbind\n- systemctl enable rpc-statd\n- systemctl start rpcbind\n- systemctl start rpc-statd\n- echo `date`,`hostname`, predockerinstall>>/opt/m\n- for i in 1 2 3 4 5; do curl --max-time 60 -fsSL https://aptdocker.azureedge.net/gpg | apt-key add -; [ $? -eq 0 ] && break || sleep 5; done\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- apt-get update\n- apt-get install -y ebtables\n- apt-get install -y docker-engine\n- echo `date`,`hostname`, postdockerinstall>>/opt/m\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n\n- echo `date`,`hostname`, PRE-APT-SYSTEMD-DAILY>>/opt/m\n- /usr/lib/apt/apt.systemd.daily\n- echo `date`,`hostname`, POST-APT-SYSTEMD-DAILY>>/opt/m\n- apt-mark unhold walinuxagent\n- mkdir -p /opt/azure/containers && touch /opt/azure/containers/runcmd.complete\n- echo `date`,`hostname`, endruncmd>>/opt/m \n\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshRSAPublicKey')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('agentpool1osImageOffer')]",
            "publisher": "[variables('agentpool1osImagePublisher')]",
            "sku": "[variables('agentpool1osImageSKU')]",
            "version": "[variables('agentpool1osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        }
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "agentpool1",
        "resourceNameSuffix": "[variables('nameSuffix')]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool1Count'), variables('agentpool1Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool1VMNamePrefix'), copyIndex(variables('agentpool1Offset')),'/cse', copyIndex(variables('agentpool1Offset')))]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' /usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1 &\" &')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {},
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool2Count'), variables('agentpool2Offset'))]",
        "name": "loop"
      },
      "dependsOn": [
        "[variables('nsgID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool2VMNamePrefix'), 'nic-', copyIndex(variables('agentpool2Offset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "primary": true,
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('agentpool2VnetSubnetID')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgID')]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "location": "[variables('location')]",
      "name": "[variables('agentpool2AvailabilitySet')]",
      "properties": {
        "managed": "true",
        "platformFaultDomainCount": "2",
        "platformUpdateDomainCount": "3"
      },
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "copy": {
        "count": "[sub(variables('agentpool2Count'), variables('agentpool2Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentpool2VMNamePrefix'), 'nic-', copyIndex(variables('agentpool2Offset')))]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentpool2AvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool2VMNamePrefix'), copyIndex(variables('agentpool2Offset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentpool2AvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentpool2VMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentpool2VMNamePrefix'), 'nic-', copyIndex(variables('agentpool2Offset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminPassword": "[variables('windowsAdminPassword')]",
          "adminUsername": "[variables('windowsAdminUsername')]",
          "computername": "[concat(variables('agentpool2VMNamePrefix'), copyIndex(variables('agentpool2Offset')))]",
          "customData": "[base64(concat('<#\n    .SYNOPSIS\n        Provisions VM as a Kubernetes agent.\n\n    .DESCRIPTION\n        Provisions VM as a Kubernetes agent.\n#>\n[CmdletBinding(DefaultParameterSetName=\"Standard\")]\nparam(\n    [string]\n    [ValidateNotNullOrEmpty()]\n    $MasterIP,\n\n    [parameter()]\n    [ValidateNotNullOrEmpty()]\n    $KubeDnsServiceIp,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $MasterFQDNPrefix,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $Location,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AgentKey,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AzureHostname,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AADClientId,\n\n    [parameter(Mandatory=$true)]\n    [ValidateNotNullOrEmpty()]\n    $AADClientSecret\n)\n\n$global:CACertificate = \"',variables('caCertificate'),'\"\n$global:AgentCertificate = \"',variables('clientCertificate'),'\"\n$global:DockerServiceName = \"Docker\"\n$global:KubeDir = \"c:\\k\"\n$global:KubeBinariesSASURL = \"',variables('kubeBinariesSASURL'),'\"\n$global:KubeBinariesVersion = \"',variables('kubeBinariesVersion'),'\"\n$global:WindowsTelemetryGUID = \"',variables('windowsTelemetryGUID'),'\"\n$global:KubeletStartFile = $global:KubeDir + \"\\kubeletstart.ps1\"\n$global:KubeProxyStartFile = $global:KubeDir + \"\\kubeproxystart.ps1\"\n\n$global:TenantId = \"',variables('tenantID'),'\"\n$global:SubscriptionId = \"',variables('subscriptionId'),'\"\n$global:ResourceGroup = \"',variables('resourceGroup'),'\"\n$global:SubnetName = \"',variables('subnetName'),'\"\n$global:MasterSubnet = \"',variables('subnet'),'\"\n$global:SecurityGroupName = \"',variables('nsgName'),'\"\n$global:VNetName = \"',variables('virtualNetworkName'),'\"\n$global:RouteTableName = \"',variables('routeTableName'),'\"\n$global:PrimaryAvailabilitySetName = \"',variables('primaryAvailabilitySetName'),'\"\n$global:KubeClusterCIDR = \"',variables('kubeClusterCidr'),'\"\n$global:KubeServiceCIDR = \"',variables('kubeServiceCidr'),'\"\n\n$global:UseManagedIdentityExtension = \"',variables('useManagedIdentityExtension'),'\"\n$global:UseInstanceMetadata = \"',variables('useInstanceMetadata'),'\"\n\n$global:CNIPath = [Io.path]::Combine(\"$global:KubeDir\", \"cni\")\n$global:NetworkMode = \"L2Bridge\"\n$global:CNIConfig = [Io.path]::Combine($global:CNIPath, \"config\", \"`$global:NetworkMode.conf\")\n$global:HNSModule = [Io.path]::Combine(\"$global:KubeDir\", \"hns.psm1\")\n\n$global:VolumePluginDir = [Io.path]::Combine(\"$global:KubeDir\", \"volumeplugins\")\n\nfilter Timestamp {\"$(Get-Date -Format o): $_\"}\n\nfunction\nWrite-Log($message)\n{\n    $msg = $message | Timestamp\n    Write-Output $msg\n}\n\nfunction Set-TelemetrySetting()\n{\n    Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\DataCollection\" -Name \"CommercialId\" -Value $global:WindowsTelemetryGUID -Force\n}\n\nfunction\nGet-KubeBinaries()\n{\n    $zipfile = \"c:\\k.zip\"\n    Invoke-WebRequest -Uri $global:KubeBinariesSASURL -OutFile $zipfile\n    Expand-Archive -path $zipfile -DestinationPath C:\\\n}\n\nfunction\nWrite-AzureConfig()\n{\n    $azureConfigFile = $global:KubeDir + \"\\azure.json\"\n\n    $azureConfig = @\"\n{\n    \"tenantId\": \"$global:TenantId\",\n    \"subscriptionId\": \"$global:SubscriptionId\",\n    \"aadClientId\": \"$AADClientId\",\n    \"aadClientSecret\": \"$AADClientSecret\",\n    \"resourceGroup\": \"$global:ResourceGroup\",\n    \"location\": \"$Location\",\n    \"subnetName\": \"$global:SubnetName\",\n    \"securityGroupName\": \"$global:SecurityGroupName\",\n    \"vnetName\": \"$global:VNetName\",\n    \"routeTableName\": \"$global:RouteTableName\",\n    \"primaryAvailabilitySetName\": \"$global:PrimaryAvailabilitySetName\",\n    \"useManagedIdentityExtension\": $global:UseManagedIdentityExtension,\n    \"useInstanceMetadata\": $global:UseInstanceMetadata\n}\n\"@\n\n    $azureConfig | Out-File -encoding ASCII -filepath \"$azureConfigFile\"\n}\n\nfunction\nWrite-KubeConfig()\n{\n    $kubeConfigFile = $global:KubeDir + \"\\config\"\n\n    $kubeConfig = @\"\n---\napiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: \"$global:CACertificate\"\n    server: https://${MasterIP}:443\n  name: \"$MasterFQDNPrefix\"\ncontexts:\n- context:\n    cluster: \"$MasterFQDNPrefix\"\n    user: \"$MasterFQDNPrefix-admin\"\n  name: \"$MasterFQDNPrefix\"\ncurrent-context: \"$MasterFQDNPrefix\"\nkind: Config\nusers:\n- name: \"$MasterFQDNPrefix-admin\"\n  user:\n    client-certificate-data: \"$global:AgentCertificate\"\n    client-key-data: \"$AgentKey\"\n\"@\n\n    $kubeConfig | Out-File -encoding ASCII -filepath \"$kubeConfigFile\"\n}\n\nfunction\nNew-InfraContainer()\n{\n    cd $global:KubeDir\n    docker build -t kubletwin/pause .\n}\n\nfunction\nWrite-KubernetesStartFiles($podCIDR)\n{\n    mkdir $global:VolumePluginDir\n    $KubeletArgList = @(\"--hostname-override=`$global:AzureHostname\",\"--pod-infra-container-image=kubletwin/pause\",\"--resolv-conf=\"\"\"\"\"\"\"\"\",\"--kubeconfig=c:\\k\\config\",\"--cloud-provider=azure\",\"--cloud-config=c:\\k\\azure.json\")\n    $KubeletCommandLine = @\"\nc:\\k\\kubelet.exe --hostname-override=`$global:AzureHostname --pod-infra-container-image=kubletwin/pause --resolv-conf=\"\" --allow-privileged=true --enable-debugging-handlers --cluster-dns=`$global:KubeDnsServiceIp --cluster-domain=cluster.local  --kubeconfig=c:\\k\\config --hairpin-mode=promiscuous-bridge --v=2 --azure-container-registry-config=c:\\k\\azure.json --runtime-request-timeout=10m  --cloud-provider=azure --cloud-config=c:\\k\\azure.json\n\"@\n\n    if ($global:KubeBinariesVersion -lt \"1.8.0\")\n    {\n        # --api-server deprecates from 1.8.0\n        $KubeletArgList += \"--api-servers=https://`${global:MasterIP}:443\"\n        $KubeletCommandLine += \" --api-servers=https://`${global:MasterIP}:443\"\n    }\n\n    # network plugin config\n    $KubeletCommandLine += \" --network-plugin=cni --cni-bin-dir=`$global:CNIPath --cni-conf-dir `$global:CNIPath\\config\"\n\n    # more time is needed to pull windows server images\n    $KubeletCommandLine += \" --image-pull-progress-deadline=20m --cgroups-per-qos=false --enforce-node-allocatable=`\"`\"\"\n    $KubeletCommandLine += \" --volume-plugin-dir=`$global:VolumePluginDir\"\n\n    $KubeletArgListStr = \"`\"\" + ($KubeletArgList -join \"`\",`\"\") + \"`\"\"\n\n    $KubeletArgListStr = \"@`($KubeletArgListStr`)\"\n\n    $kubeStartStr = @\"\n`$global:AzureHostname = \"$AzureHostname\"\n`$global:MasterIP = \"$MasterIP\"\n`$global:KubeDnsServiceIp = \"$KubeDnsServiceIp\"\n`$global:MasterSubnet = \"$global:MasterSubnet\"\n`$global:KubeClusterCIDR = \"$global:KubeClusterCIDR\"\n`$global:KubeServiceCIDR = \"$global:KubeServiceCIDR\"\n`$global:KubeBinariesVersion = \"$global:KubeBinariesVersion\"\n`$global:CNIPath = \"$global:CNIPath\"\n`$global:NetworkMode = \"$global:NetworkMode\"\n`$global:CNIConfig = \"$global:CNIConfig\"\n`$global:HNSModule = \"$global:HNSModule\"\n`$global:VolumePluginDir = \"$global:VolumePluginDir\"\n\nfunction\nGet-DefaultGateway(`$CIDR)\n{\n    return `$CIDR.substring(0,`$CIDR.lastIndexOf(\".\")) + \".1\"\n}\n\nfunction\nGet-PodCIDR()\n{\n    `$podCIDR = c:\\k\\kubectl.exe --kubeconfig=c:\\k\\config get nodes/`$(`$global:AzureHostname.ToLower()) -o custom-columns=podCidr:.spec.podCIDR --no-headers\n    return `$podCIDR\n}\n\nfunction\nTest-PodCIDR(`$podCIDR)\n{\n    return `$podCIDR.length -gt 0\n}\n\nfunction\nUpdate-CNIConfig(`$podCIDR, `$masterSubnetGW)\n{\n    `$jsonSampleConfig =\n\"{\n  \"\"cniVersion\"\": \"\"0.2.0\"\",\n  \"\"name\"\": \"\"<NetworkMode>\"\",\n  \"\"type\"\": \"\"wincni.exe\"\",\n  \"\"master\"\": \"\"Ethernet\"\",\n  \"\"capabilities\"\": { \"\"portMappings\"\": true },\n  \"\"ipam\"\": {\n     \"\"environment\"\": \"\"azure\"\",\n     \"\"subnet\"\":\"\"<PODCIDR>\"\",\n     \"\"routes\"\": [{\n        \"\"GW\"\":\"\"<PODGW>\"\"\n     }]\n  },\n  \"\"dns\"\" : {\n    \"\"Nameservers\"\" : [ \"\"<NameServers>\"\" ]\n  },\n  \"\"AdditionalArgs\"\" : [\n    {\n      \"\"Name\"\" : \"\"EndpointPolicy\"\", \"\"Value\"\" : { \"\"Type\"\" : \"\"OutBoundNAT\"\", \"\"ExceptionList\"\": [ \"\"<ClusterCIDR>\"\", \"\"<MgmtSubnet>\"\" ] }\n    },\n    {\n      \"\"Name\"\" : \"\"EndpointPolicy\"\", \"\"Value\"\" : { \"\"Type\"\" : \"\"ROUTE\"\", \"\"DestinationPrefix\"\": \"\"<ServiceCIDR>\"\", \"\"NeedEncap\"\" : true }\n    }\n  ]\n}\"\n\n    `$configJson = ConvertFrom-Json `$jsonSampleConfig\n    `$configJson.name = `$global:NetworkMode.ToLower()\n    `$configJson.ipam.subnet=`$podCIDR\n    `$configJson.ipam.routes[0].GW = `$masterSubnetGW\n    `$configJson.dns.Nameservers[0] = `$global:KubeDnsServiceIp\n\n    `$configJson.AdditionalArgs[0].Value.ExceptionList[0] = `$global:KubeClusterCIDR\n    `$configJson.AdditionalArgs[0].Value.ExceptionList[1] = `$global:MasterSubnet\n    `$configJson.AdditionalArgs[1].Value.DestinationPrefix  = `$global:KubeServiceCIDR\n\n    if (Test-Path `$global:CNIConfig)\n    {\n        Clear-Content -Path `$global:CNIConfig\n    }\n\n    Write-Host \"Generated CNI Config [`$configJson]\"\n\n    Add-Content -Path `$global:CNIConfig -Value (ConvertTo-Json `$configJson -Depth 20)\n}\n\ntry\n{\n    `$masterSubnetGW = Get-DefaultGateway `$global:MasterSubnet\n    `$podCIDR=Get-PodCIDR\n    `$podCidrDiscovered=Test-PodCIDR(`$podCIDR)\n\n    # if the podCIDR has not yet been assigned to this node, start the kubelet process to get the podCIDR, and then promptly kill it.\n    if (-not `$podCidrDiscovered)\n    {\n        `$argList = $KubeletArgListStr\n\n        `$process = Start-Process -FilePath c:\\k\\kubelet.exe -PassThru -ArgumentList `$argList\n\n        # run kubelet until podCidr is discovered\n        Write-Host \"waiting to discover pod CIDR\"\n        while (-not `$podCidrDiscovered)\n        {\n            Write-Host \"Sleeping for 10s, and then waiting to discover pod CIDR\"\n            Start-Sleep 10\n\n            `$podCIDR=Get-PodCIDR\n            `$podCidrDiscovered=Test-PodCIDR(`$podCIDR)\n        }\n\n        # stop the kubelet process now that we have our CIDR, discard the process output\n        `$process | Stop-Process | Out-Null\n    }\n\n    # Turn off Firewall to enable pods to talk to service endpoints. (Kubelet should eventually do this)\n    netsh advfirewall set allprofiles state off\n\n    # startup the service\n    `$hnsNetwork = Get-HnsNetwork | ? Name -EQ `$global:NetworkMode.ToLower()\n\n    if (!`$hnsNetwork)\n    {\n        Write-Host \"No HNS network found, creating a new one...\"\n        ipmo `$global:HNSModule\n\n        `$hnsNetwork = New-HNSNetwork -Type `$global:NetworkMode -AddressPrefix `$podCIDR -Gateway `$masterSubnetGW -Name `$global:NetworkMode.ToLower() -Verbose\n    }\n\n    Start-Sleep 10\n    # Add route to all other POD networks\n    Update-CNIConfig `$podCIDR `$masterSubnetGW\n\n    $KubeletCommandLine\n}\ncatch\n{\n    Write-Error `$_\n}\n\"@\n    $kubeStartStr | Out-File -encoding ASCII -filepath $global:KubeletStartFile\n\n    $kubeProxyStartStr = @\"\n`$env:KUBE_NETWORK = \"l2bridge\"\n`$global:NetworkMode = \"L2Bridge\"\n`$hnsNetwork = Get-HnsNetwork | ? Name -EQ `$global:NetworkMode.ToLower()\nwhile (!`$hnsNetwork)\n{\n    Start-Sleep 10\n    `$hnsNetwork = Get-HnsNetwork | ? Name -EQ `$global:NetworkMode.ToLower()\n}\n\nc:\\k\\kube-proxy.exe --v=3 --proxy-mode=kernelspace --hostname-override=$AzureHostname --kubeconfig=c:\\k\\config\n\"@\n\n    $kubeProxyStartStr | Out-File -encoding ASCII -filepath $global:KubeProxyStartFile\n}\n\nfunction\nNew-NSSMService\n{\n    # setup kubelet\n    c:\\k\\nssm install Kubelet C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    c:\\k\\nssm set Kubelet AppDirectory $global:KubeDir\n    c:\\k\\nssm set Kubelet AppParameters $global:KubeletStartFile\n    c:\\k\\nssm set Kubelet DisplayName Kubelet\n    c:\\k\\nssm set Kubelet Description Kubelet\n    c:\\k\\nssm set Kubelet Start SERVICE_AUTO_START\n    c:\\k\\nssm set Kubelet ObjectName LocalSystem\n    c:\\k\\nssm set Kubelet Type SERVICE_WIN32_OWN_PROCESS\n    c:\\k\\nssm set Kubelet AppThrottle 1500\n    c:\\k\\nssm set Kubelet AppStdout C:\\k\\kubelet.log\n    c:\\k\\nssm set Kubelet AppStderr C:\\k\\kubelet.err.log\n    c:\\k\\nssm set Kubelet AppStdoutCreationDisposition 4\n    c:\\k\\nssm set Kubelet AppStderrCreationDisposition 4\n    c:\\k\\nssm set Kubelet AppRotateFiles 1\n    c:\\k\\nssm set Kubelet AppRotateOnline 1\n    c:\\k\\nssm set Kubelet AppRotateSeconds 86400\n    c:\\k\\nssm set Kubelet AppRotateBytes 1048576\n    net start Kubelet\n\n    # setup kubeproxy\n    c:\\k\\nssm install Kubeproxy C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n    c:\\k\\nssm set Kubeproxy AppDirectory $global:KubeDir\n    c:\\k\\nssm set Kubeproxy AppParameters $global:KubeProxyStartFile\n    c:\\k\\nssm set Kubeproxy DisplayName Kubeproxy\n    c:\\k\\nssm set Kubeproxy DependOnService Kubelet\n    c:\\k\\nssm set Kubeproxy Description Kubeproxy\n    c:\\k\\nssm set Kubeproxy Start SERVICE_AUTO_START\n    c:\\k\\nssm set Kubeproxy ObjectName LocalSystem\n    c:\\k\\nssm set Kubeproxy Type SERVICE_WIN32_OWN_PROCESS\n    c:\\k\\nssm set Kubeproxy AppThrottle 1500\n    c:\\k\\nssm set Kubeproxy AppStdout C:\\k\\kubeproxy.log\n    c:\\k\\nssm set Kubeproxy AppStderr C:\\k\\kubeproxy.err.log\n    c:\\k\\nssm set Kubeproxy AppRotateFiles 1\n    c:\\k\\nssm set Kubeproxy AppRotateOnline 1\n    c:\\k\\nssm set Kubeproxy AppRotateSeconds 86400\n    c:\\k\\nssm set Kubeproxy AppRotateBytes 1048576\n    net start Kubeproxy\n}\n\nfunction\nSet-Explorer\n{\n    # setup explorer so that it is usable\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\"\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\BrowserEmulation\"\n    New-ItemProperty -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\BrowserEmulation\" -Name IntranetCompatibilityMode -Value 0 -Type DWord\n    New-Item -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\Main\"\n    New-ItemProperty -Path HKLM:\"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Internet Explorer\\\\Main\" -Name \"Start Page\" -Type String -Value http://bing.com\n}\n\ntry\n{\n    # Set to false for debugging.  This will output the start script to\n    # c:\\AzureData\\CustomDataSetupScript.log, and then you can RDP\n    # to the windows machine, and run the script manually to watch\n    # the output.\n    if ($true) {\n        Write-Log \"Provisioning $global:DockerServiceName... with IP $MasterIP\"\n\n        Write-Log \"apply telemetry data setting\"\n        Set-TelemetrySetting\n\n        Write-Log \"download kubelet binaries and unzip\"\n        Get-KubeBinaries\n\n        Write-Log \"Write azure config\"\n        Write-AzureConfig\n\n        Write-Log \"Write kube config\"\n        Write-KubeConfig\n\n        Write-Log \"Create the Pause Container kubletwin/pause\"\n        New-InfraContainer\n\n        Write-Log \"write kubelet startfile with pod CIDR of $podCIDR\"\n        Write-KubernetesStartFiles $podCIDR\n\n        Write-Log \"install the NSSM service\"\n        New-NSSMService\n\n        Write-Log \"Set Internet Explorer\"\n        Set-Explorer\n\n        Write-Log \"Setup Complete\"\n    }\n    else\n    {\n        # keep for debugging purposes\n        Write-Log \".\\CustomDataSetupScript.ps1 -MasterIP $MasterIP -KubeDnsServiceIp $KubeDnsServiceIp -MasterFQDNPrefix $MasterFQDNPrefix -Location $Location -AgentKey $AgentKey -AzureHostname $AzureHostname -AADClientId $AADClientId -AADClientSecret $AADClientSecret\"\n    }\n}\ncatch\n{\n    Write-Error $_\n}\n'))]"
        },
        "storageProfile": {
          "imageReference": {
            "offer": "[variables('agentWindowsOffer')]",
            "publisher": "[variables('agentWindowsPublisher')]",
            "sku": "[variables('agentWindowsSku')]",
            "version": "[variables('agentWindowsVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        }
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('agentpool2VMNamePrefix'), copyIndex(variables('agentpool2Offset')))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "agentpool2",
        "resourceNameSuffix": "[variables('winResourceNamePrefix')]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('agentpool2Count'), variables('agentpool2Offset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentpool2VMNamePrefix'), copyIndex(variables('agentpool2Offset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('agentpool2VMNamePrefix'), copyIndex(variables('agentpool2Offset')), '/cse')]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -command \"', '$arguments = ', variables('singleQuote'),'-MasterIP ',variables('kubernetesAPIServerIP'),' -KubeDnsServiceIp ',variables('kubeDnsServiceIp'),' -MasterFQDNPrefix ',variables('masterFqdnPrefix'),' -Location ',variables('location'),' -AgentKey ',variables('clientPrivateKey'),' -AzureHostname ',variables('agentpool2VMNamePrefix'),copyIndex(variables('agentpool2Offset')),' -AADClientId ',variables('servicePrincipalClientId'),' -AADClientSecret ',variables('servicePrincipalClientSecret'),variables('singleQuote'), ' ; ', variables('windowsCustomScriptSuffix'), '\" > %SYSTEMDRIVE%\\AzureData\\CustomDataSetupScript.log 2>&1')]"
        },
        "publisher": "Microsoft.Compute",
        "settings": {},
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.8"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "location": "[variables('location')]",
      "name": "[variables('masterAvailabilitySet')]",
      "properties": {
        "managed": "true",
        "platformFaultDomainCount": "2",
        "platformUpdateDomainCount": "3"
      },
      "type": "Microsoft.Compute/availabilitySets"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('nsgName')]",
      "properties": {
        "securityRules": [
          {
            "name": "allow_rdp",
            "properties": {
              "access": "Allow",
              "description": "Allow RDP traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "3389-3389",
              "direction": "Inbound",
              "priority": 102,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_ssh",
            "properties": {
              "access": "Allow",
              "description": "Allow SSH traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "22-22",
              "direction": "Inbound",
              "priority": 101,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          },
          {
            "name": "allow_kube_tls",
            "properties": {
              "access": "Allow",
              "description": "Allow kube-apiserver (tls) traffic to master",
              "destinationAddressPrefix": "*",
              "destinationPortRange": "443-443",
              "direction": "Inbound",
              "priority": 100,
              "protocol": "Tcp",
              "sourceAddressPrefix": "*",
              "sourcePortRange": "*"
            }
          }
        ]
      },
      "type": "Microsoft.Network/networkSecurityGroups"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('routeTableName')]",
      "type": "Microsoft.Network/routeTables"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "location": "[variables('location')]",
      "name": "[variables('masterLbName')]",
      "properties": {
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ],
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "backendAddressPool": {
                "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
              },
              "backendPort": 443,
              "enableFloatingIP": false,
              "frontendIPConfiguration": {
                "id": "[variables('masterLbIPConfigID')]"
              },
              "frontendPort": 443,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('masterLbID'),'/probes/tcpHTTPSProbe')]"
              },
              "protocol": "tcp"
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "intervalInSeconds": "5",
              "numberOfProbes": "2",
              "port": 443,
              "protocol": "tcp"
            }
          }
        ]
      },
      "type": "Microsoft.Network/loadBalancers"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "location": "[variables('location')]",
      "name": "[variables('masterPublicIPAddressName')]",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[variables('masterFqdnPrefix')]"
        },
        "publicIPAllocationMethod": "Dynamic"
      },
      "type": "Microsoft.Network/publicIPAddresses"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "masterLbLoopNode"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
      "properties": {
        "backendPort": 22,
        "enableFloatingIP": false,
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "frontendPort": "[variables('sshNatPorts')[copyIndex(variables('masterOffset'))]]",
        "protocol": "tcp"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "nicLoopNode"
      },
      "dependsOn": [
        "[variables('nsgID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
      "properties": {
        "enableIPForwarding": true,
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex(variables('masterOffset')))]"
                }
              ],
              "primary": true,
              "privateIPAddress": "[variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))]]",
              "privateIPAllocationMethod": "Static",
              "subnet": {
                "id": "[variables('vnetSubnetID')]"
              }
            }
          }
        ],
        "networkSecurityGroup": {
          "id": "[variables('nsgID')]"
        }
      },
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('apiVersionStorageManagedDisks')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex(variables('masterOffset')))]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'),'nic-', copyIndex(variables('masterOffset'))))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[variables('username')]",
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
          "customData": "[base64(concat('#cloud-config\n\n\npackages:\n - jq\n - traceroute\n\n\nwrite_files:\n\n- path: \"/etc/systemd/system/docker.service.d/clear_mount_propagation_flags.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    MountFlags=shared\n\n\n- path: \"/etc/systemd/system/docker.service.d/exec_start.conf\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Service]\n    ExecStart=\n\n    ExecStart=/usr/bin/docker daemon -H fd:// --storage-driver=overlay2 --bip=',variables('dockerBridgeCidr'),'\n\n- path: \"/etc/docker/daemon.json\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    {\n      \"live-restore\": true,\n      \"log-driver\": \"json-file\",\n      \"log-opts\":  {\n         \"max-size\": \"50m\",\n         \"max-file\": \"5\"\n      }\n    }\n\n- path: \"/etc/kubernetes/certs/ca.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('caCertificate'),'\n\n- path: \"/etc/kubernetes/certs/client.crt\"\n  permissions: \"0644\"\n  encoding: \"base64\"\n  owner: \"root\"\n  content: |\n    ',variables('clientCertificate'),'\n\n\n\n- path: \"/var/lib/kubelet/kubeconfig\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    apiVersion: v1\n    kind: Config\n    clusters:\n    - name: localcluster\n      cluster:\n        certificate-authority: /etc/kubernetes/certs/ca.crt\n        server: ',concat('https://', variables('masterPrivateIpAddrs')[copyIndex(variables('masterOffset'))], ':443'),'\n    users:\n    - name: client\n      user:\n        client-certificate: /etc/kubernetes/certs/client.crt\n        client-key: /etc/kubernetes/certs/client.key\n    contexts:\n    - context:\n        cluster: localcluster\n        user: client\n      name: localclustercontext\n    current-context: localclustercontext\n\n\n\n- path: /etc/kubernetes/manifests/kube-scheduler.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4SSQY/bIBCF7/kViDtC7RE1PbeHbVdaqfcxTGwUGBCMvfK/r0ideNdJat94b96H5wnI/g+W6hMZIacv8nD25IyQr8nJQ0QGBwzmIARBRCPkeexQVTugGwMWuRg1g13duTLGZgXoMNSWFoI9FiNsIi4pqByA8KLbFHMiJDbiM/tQM9qWHVLlX8jvqZyN4DK2XOOAJywLXT3/v/b5CH1zvzW7EDLWH3PG0o5vGe3366BNMQI5sxwbWOrhOio/yneXXFSl2qBNdPL9UU9QdPCdblpA1qu3CQUEh0VhQMvHtuPGzyWdfPDUH08Q6tadjl+vypTCGPEljcT14xZLPchWrR2sGCFii7wCD0ZIjWz1o7EbZ4Kigu/UsthT0KaAe1Ksfi/7DtAjsX4Bgh7dT4fEnmf1hsye+k9bFAT3m8J8eyj/+ti+ksc1tId2ufwGzP/pY6+L57SHpdwXsg/Yb+ZvAAAA///Or4sP3wMAAA==\n\n- path: /etc/kubernetes/manifests/kube-controller-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4ySMa+bMBDHdz7FyXMR6mpVb3lLO7z2SZG6RB0OcyVW7LNlH0R8+8oJ0LQhpWyY3/2O+58x2u+Usg2sQY0fVXW23GlQ76FTlSfBDgV1BcDoSYM6Dy3VJrCk4Byl2iNjT0nNRI5oVixPWciXTw5bcrloAMRS0jAr6uiQ6Xpugo+BiUXDkyZVjmSK5BSyfCW5hHTWIGkogoKjZUpzm/o//rg81mNfsE+FS0xC+fMUKZXXQyTzsoAmeI8lm6NqTguhPoDacP+YazD1WcPxzv26wm839jXwT9u/LBVjcIOntzCwZA3z4d00JKb+bVMrAOBLzTvKSYNqSEyzha2eEVPtbHt1OZKnohFT42zbPHCLyWe7V3tB7ImluU3cfemIxcpUH0jEcv/HFImw+8ZuWvd6C+TvpW7HUO7FtfkqjP/IYy+L57bNUB4D2RfsJ/MrAAD//wNK99agAwAA\n\n- path: /etc/kubernetes/manifests/kube-apiserver.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yRQWvjMBCF7/4VQuc1Zq9iCSy9NIe0gUAvoYexPHVEpJGQxg7+90Wu7TRt0tQ36733afQGgnnBmIwnJWT/VxZHQ40ScusbWThkaIBBFUIQOFRCHrsaSwgmYewxyklIAfSipiExuixZqNGmnBaCDUYltCeO3pbBAuF4rr0LnpBYiUt2kQLqnD34xE/IJx+PSnDsci5zwBDGiV7eni9/xkGb1X9ZjoSM6XEIGPPvLqBezUbtnYNcwF5Wh9kh/wh5Rr5OVohtUmL/Cfl/u96NngdPb6Zdzc7e287hxnfE07gXIyPr8gyRi0EIlyNb4IMSskLW1TXbwukhltbUI8si3wT1ECtr6uqbbyG5ZO6mTwAtElcbIGixWTdIbHgod8hsqL14R0RonskOy/o+Gvm6u+tF5PWPly/A8EMj99q4Tbtay4xzyfwacL+Z9wAAAP//THO1tHUDAAA=\n\n- path: /etc/kubernetes/manifests/kube-addon-manager.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4yRsW7zMAyEdz8Fkd3w/w9ZhKJAxw5pAwTozkiEIySiXJFy4LcvZMdOWjRtR5LH43cSdv6NkvjIBvr/1dGzM7CNrgqk6FDRVACMgQwc855qdC5yHZCxpXQZSYd2nssgSqEC6G9cpSNbfA5R9IX0HNPRgKZMFYCNrOiZkhRF/dMtAB+wJQMPZZyYlOSpaDaTZNeRfRx1iSTmZGn0nBrvmUSXGsB22cA6LHWgENNgYP1v48dmH0850CZmntdmuJFLLpuhCLaoBwOrhtQ2V7ZmEq4WBnSvfBqW6FfHIP47ux5Tc/L75ozYEmsz5XTPjli9DvWOVD239y9MGT697A18+Y7x1GW9+y3FV9x7Bn/n/ggAAP//ovMbJ38CAAA=\n\n\n\n- path: /etc/kubernetes/addons/kube-heapster-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xWW2tjNxB+P79C+F1ep92AK+pCmk3bh2Y3JFAoLISxNOujWrfq4rX31xfpHNvnYgcTNlC9WGdGo2/mm4sMTv6FPkhrGNlcVWtpBCNP6DeS4w3nNplYaYwgIAKrCDGgkZEawYWIvhUEBxwZWacl0rALEXVFiIIlqpBtSNF4gxHDVNp3XKVsTEMDw8gk+oSTchKEsEaDgRX6ad9MW4GMPCK3hkuFFaW06rrvl8CnkGJtvfwGUVozXc+L5eZqiRH20d028I9W4YnQGv/ZPkL6VcaaGjBm93Yx3ZmQPN5tZYih8klhYBUl4OTv3iZX8CjBbUSTIw3lE5zLG4/BJs+xPSTQKbvTaGJWbtAvW8UKY/lVMjSbrxB5XXbJCYhYtq4IR9CTyRgJNy0IPZZA+2lFu3NWXObGd0jlr9IIaVb/y4xahY/4JYPsiX0hxIqQcZ1eEEtIy3+Qx1I6J9v48uYdpmM4GHokv47B/snGsT/6jl3iaXDIM7SzPrYllreMzGcFJoJfYXxoRfMfKkICKuTR+tbjeaDgXAcrB99E++HQTD02jo14qMazfIxuf8s6e2EYD/jc0+bRKckhMHI1YkbnzvyzE8zpcCJqpyBia9QhIi/Vsz9HCCFgjI2lCzqHA69RJIV+CsrVMCCAexklB0WdFawZUYTsAyu5twp9/05K1rhj5LY1vcn0hk9G7Q6Y1mUb6xk5kFru7bXSx2F15sWtiSAN+g6a1LBCRn4+er6v8SeH/JcDKrdagxHH0CmZvNvfP+lKKW2m8KJDRkhag989g5Ps8+Tz5GgwaqNm9Ub5UfhvwhB7MkK4S7lzdE+oUVu/Y+Tq/exedjRKavnqC06xVRL0iEF+u4gxZ8VzGYYDyrhLi/lMD6S4jR6Kbja9HiobDxfFwZN27YH3I3WsPYbaKrG4HmiOj/PiTG4PNXTugLNKUYdeWrH4cZbX0LkQpc4FvMCtswZNlKDOFcThFXxdWVyfyepPF1bFRfZoNt0kb0Al/M1b3b/vi0Ql2jd2JH+AWLPDaJpmDjrHGkru/35++PTh+ePN/d33Rysj+SXIp4eb2z1u/vv01JvEeeV3ZjAAbWBESZO21X8BAAD//0SxZ2rFCwAA\n\n- path: /etc/kubernetes/addons/kube-dns-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xYS2/jNhC++1cQ7ll+JMhuINQBgnXQDbZJjTrtfUKOJcIUyfDhxvvrC0qyLEq2Y+dQ1DdxXh/nm4dk0PxvNJYrmZLNdLDmkqVkiWbDKd5Tqrx0gwIdMHCQDgiRUGBK1v4VEyZtfWA10N2p3VqHxYAQAa8obLAhpcRIdGhHXI2p8NahSWwVJiVDZzwOS01gTMkCJGRoRrFZoRim5E+kSlIucJAkyeAU/Ah3hObWJqB1dI1LMMaaVUZ++FecPy8vyJDVSAOeOtLjIiW/risv9QUeF3cDQrQyrgSe1K53gIMgJTfX1YNRTlElUvLXfBErJ47qUwYv34KBRYHUKXMsRd1sg9Z2vJm+ooNd3ueohdoW2CmZzxXCYZI2DdlXk16uk/3hiXwb1IJTsCm56l27AEfz31t4j+HoIXFYaAEOaz+t65dVLaVy4LiSjV9CLM2ReYFmBELn0Kl2arjjFESiFUvJcFibiQjccXiXpPrAdQjZpauEv1pxyd12H1Yrdi8dv+8JQmHhCo1BNveGy2xZ3ZLL7DGTqjl+eEfqQ0Lapgn5B3mWu5RMJ5PWeRWvjvWCpkgjYZ2VZURl+1fS+vCuDVobc7CPvMZtustmT0yI0mggOCeP8oB4A8LjAb+l5y4z1c8prYTKtj/KwBFZubIuVPFgpylC8DbyGu+3ukjuw9S0f0ixHfQBP7xz65qyVcIX2PLTaSGq5IpnjZfq8Ql0+2q9CbePGUCCSEkorkHjwgGXaFpBwWStZCVkmCRMFcDlrK7TkVAUxGjY0ZE2CUNsNp1Mbq47ws3sqnNSgU8YN7Nx54J7TV5AhvXorRioR/lSI71r1ATfoERrF0a9YjsZK+DCG3zJDdpcCZaSm5Y0d07/hi4uDA0uT8lwnCMIl/9MQmgm7bBT8WFY305u40YIQyNk//vLy6IlCJ3BQcxRwHYZNiSzKfnSNrWeUrS2hXPakjpeoPKuMd3fYU92m+tmKe3S3bC8KHGXBPVKJuS/JDYaF/Hiutiho/qE02q5VT+DwPhBEk/S1JgdIWj6aYKuJ2dRYNAqb2g8XwQvuOtMnAILZbYpmX6dPPGWxOCbR9vVptqXeS0O+ohcVFPjKbwNRqyfHh6EFMFiUeax24EnZkGvk4XKnLKOoTGxoHI1P9ngQc+gdWDcXNoC7NssXn3lrIgf191JAjTHxPKfGEbPpCOVKgRQYtM5D7sWzWx69XU0GU1G018Oja1aacxlAoyZERgN4zNN9Jdz1IXKkhVQLrjbzpJTk2/+vHwC+xZPvqbTQurOHgCHm/Xyvj/e9B+2+7Gi/bgoSW/JfVy0CS3YTFqh1Nrr9j5nuAIv3Mhu6CjabqShjdyNGW7G0gvR4c4bMWv2RM1BtzY/Hzcty+XM6L0tVaqU6zhsqc75m+foTtVaeAH8Xrn+7zZtL4Pkf7dpa6hnN1oH97HNd+EGublggRzeHy0PTNqFEpxuwydiWZS1wEb/Mzwfeq2UimH/xT58dXa+l5RNieDSvw/+DQAA//9hDItW0xAAAA==\n\n- path: /etc/kubernetes/addons/kube-proxy-daemonset.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/5RUy27bMBC8+ysI3RklVyEuULgBemkawEDva2psE+ZDWS5d++8LSrUtOYmb8kTMLoczswSps7/AycbQKBwEoWxTvX9YQehhtrOhbdQ3go9hCZl5CLUk1MyUcrSCS2Wn1C6vwAGCdGdjbVxOAtYJvLcGjaqEM6q+00TfxYAgTX9IdxwPx74iFtyoEFvMlArkcdVRoNSROeHpmAR+ljqYIkLgO0eCQdBYaFljsbdlvJGi1OmKvhQdmKSkdIK02uE4tGuODnfTNDyVMM7csSvnIzfq6TWTO+N7cnkaVVlYr2GkUc9xabZos8PsZCAI2QAeyTDRewrtxaVWVb09duCiqBrBU7taVVqXFhPD2m7m9Z64dnZVF8xB6kutmh46TdrYluePpW0xIAvb8per5jVIMkNvSJDmT4cObD2CkFuwFWvIvcT2awhR+nzn0ySsp03J5/GS7veTtWUHM7rtncczLEaKmQ1GD6GArxlJJphSpsuNeri/92c0wWS2clzEIDjIuL1ju7cOG7SNKqovQ40ue/yIOYz5tfIFeSHZNqqqIaZOydUGLKka0Q4+UnK6L+ltTDIRTu3P4I5Xd77DfonsLT3E6Ev9v+k/81TGExlq/7qmOH2G/I68m+BDnqMnXxp7KeNp/JWWE9dpS4zaUJ+gXVtDkxBuJHyb+zO2PzB9m/ijcd0YVvl4lnAw5Vc5Hygf+NVPFFOjnA35MPsTAAD//zcsf+33BQAA\n\n- path: /etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8xUTW8bOQy9z68gfB87wV4SYTdANgFyyQaGve2d1rC2ao2oihw37q8vNPHHTOI4TtEA1Ung5+PTozC6z5TEcTCwOi+WLlQGppRWztK1tdwELWpSrFDRFAAeZ+Ql3wCWF1JijAaWzYxSICUpK5TFjDFVTxE7x9DxyPpGlFIpT+UNDDQ1NGgjsao41BhwTmnYT6u5IgMTshys81QABKzp1a7ZKRHtJqKUtSjVRVmWRXfYNEM7xEYXnNwPVMdhuLxo+63OZ6S45eLmCfSEPf3rQuXCvMfHUSh/AFmJPU3oS8aA0d0lbuKR2QuAF1Pvhtwiwqp2oZBm9pWsiilKOKia3/NMzzX5uhhPZu+tl/gV2BLJZhyRk7aAyvZq4OKs7amY5qTj1nR5dpmNQp6scjpNHrqOZOCBK8pFXtBEj0ohX+WZfG8pel7XdGyNP2ZJP5boRNE7i2Lg/AWXNapd3HcmPIFeqqNHpU2BDlP5+F6tU3Z5CzMfy0HRBUq7CiVgmouBXcESynJBGFvmFyz6z0I1mtFoaxx2ODAbTeXjapyTgb/3QG63OKaR7FU/cNx4P2bv7NrAtf+Oa9n5vVtRIJFx4hntJwXIQO5IuyaAiLowMBgN+tauvHeNg1OH/pY8rqdZHpUY+Ksboa4mbvSQ86hC9k07T1Pu6R4fghMTK1v2Bv6/Ge/siYSbZEm6Yyb61pCo9Ee3sTnM983402STcdXLqKnmtD6c9F/rO5TnXe3e0/s+x7+3cS9Jev/3w1vUB65o2tu7fPLf8+xrYDHgXWgeofgZAAD//9s29QduCAAA\n\n- path: /etc/kubernetes/addons/azure-storage-classes.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/8ySzWrrMBCF93oKkb18ye6ibbdtKQ10WybWJAzWj5kZBdqnL5bdgJvQVVuyls+Z830YRnpBFirZW9HCcMRu+C8dlX+n7R4VtmagHLzdzY93EURMQoUACt5YmyGhtwEPUKMaayHnoqBUskzP9rO2n5LdVNkNdY+cUbHdIXFL2rVvvN0oV9wYayPsMS4161AfqyiyE+QT9XjOjFxONOEg+y8ReK+MLpAMZgSGhIrcumfAB8hwxGDOg6HvS82qbyNO+JADcHi9f94Z55z5KXFpPutGxkQ1XQq8HQdP88RfUyCL41t2cPEfXCH81ssV/jboQBH/BLwdWoPLUB/bkhXdRwAAAP//xwdE1hsEAAA=\n\n- path: /etc/kubernetes/addons/kube-tiller-deployment.yaml\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/9RUXWvbMBR9968QfXdKWAdDjELXhlJoS0i6vY4b+SzRqq9JV6HZrx92Gtd2spI+dDA9WdK5Oh+6FgX9DTFp76RYj4tH7Sop5ohrrXChlM+OCwumiphkIYQjCylYG4P4PE2BFKR4zAuUaZMYthDC0AIm1RWi2YkOjDTS/lSZnBixTFsSKU44Zpw0SKoq7yw5WiKO+mXWVzV24lKOmDzpxOmkKMuy6DqIC1IjyrzyUf8m1t6NHj815evxAkw7g5dbDTNv8EW7Srvlayb/jZfoDWb4UdNQ0NfR5/CKoUKIPSut8p0sqqx2RcqLn1CcZFGKg/d77K0O0x72Sy/DbmgUghQrGNvMBmTvmWmfrKwQjN/83WAKULXi4CM30st9sfWeFGdn4w9nzZwpLsHTZrWFJRgo9vEI+7wJaG/xZroXMp4Yrv5Mgx6+asxYDH7Q/zl3hg2GGFv1XVf16Drbd3fQ4e7g5rvX9PdDqBDKOybtEFuOUsCtXwh33fBwc3s7mX2/v7ibzKcXl5MWIMSaTN57C7dDW1pCis8v8T007PMAdd6ijF7DIaVp9AvIzskr5nAN7i4JEYhXUpzuivp7baN+7Kxrp1mTuYKhzRzKuypJMe4AWFv4zAf29tLdsaRuRG2K08GP8sohEVTpN7tuq97XdkTyOSqkroiIXxmJU1+YCvnABV9Ov86e4ec9uIX1cXOg4q7ZOFRktNVHs97W4DdR9iqcrzDvPWT1qJ+gwRPgkxRGu/xU/AkAAP//Gh4NlE4IAAA=\n\n\n\n- path: \"/etc/systemd/system/kubectl-extract.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=Kubectl extraction\n    Requires=docker.service\n    After=docker.service\n\n    ConditionPathExists=!/usr/local/bin/kubectl\n\n\n    [Service]\n    TimeoutStartSec=0\n    Restart=on-failure\n    RestartSec=5s\n    ExecStartPre=/bin/mkdir -p /tmp/kubectldir\n    ExecStartPre=/usr/bin/docker pull ',variables('kubernetesHyperkubeSpec'),'\n    ExecStartPre=/usr/bin/docker run --rm -v /tmp/kubectldir:/opt/kubectldir ',variables('kubernetesHyperkubeSpec'),' /bin/bash -c \"cp /hyperkube /opt/kubectldir/\"\n\n    ExecStartPre=/bin/mv /tmp/kubectldir/hyperkube /usr/local/bin/kubectl\n    ExecStart=/bin/chmod a+x /usr/local/bin/kubectl\n\n\n    [Install]\n    WantedBy=multi-user.target\n\n- path: \"/etc/default/kubelet\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    KUBELET_CONFIG=--address=0.0.0.0 --allow-privileged=true --anonymous-auth=false --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cgroups-per-qos=false --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable= --eviction-hard=memory.available<100Mi,nodefs.available<10%,nodefs.inodesFree<5% --image-gc-high-threshold=85 --image-gc-low-threshold=80 --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=110 --network-plugin=kubenet --node-status-update-frequency=10s --non-masquerade-cidr=10.0.0.0/8 --pod-infra-container-image=k8s-gcrio.azureedge.net/pause-amd64:3.0 --pod-manifest-path=/etc/kubernetes/manifests \n    KUBELET_IMAGE=',variables('kubernetesHyperkubeSpec'),'\n    DOCKER_OPTS=\n    KUBELET_NODE_LABELS=kubernetes.io/role=master,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'\n\n  \n    KUBELET_NON_MASQUERADE_CIDR=',variables('kubernetesNonMasqueradeCidr'),'\n    KUBELET_REGISTER_NODE=--register-node=true\n    KUBELET_REGISTER_WITH_TAINTS=--register-with-taints=',variables('registerWithTaints'),'\n  \n\n\n- path: /etc/systemd/system/kubelet.service\n  permissions: \"0644\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    H4sIAAAAAAAA/4xUTXPiRhO+61d0YR/e9zAo2K5koy0dsJEdyl8bhGsPtosapEZMMRppe3pgSZb/nhKSHRB4KxdVz9P99DP9oXl+MopfvQHahFTJqjDhrZuiRvZG+M0pQhumRbJA6lqkpUrQ688YqQ16z3FtvXojtCyJQ6lXcm29yCwVFSZHw9dKY+gjJ36KM+k0+4tGK3ZJgtZG3xXHLNnZsHdx7kXfMYmrXF8IQ3+qjD+Vdg5+UbIv/3KEflIYlsog2bdUXTs/wssXqSIQJfhLSb5W03flDzREAh01g2c4/V9eOMPwAzLCEl467QwvHfgBqwSE/j8IjfALvMJn4DkaqKW3dCGmyqQH8ofAZ5ipzrEKmjS5XKCwc0l4mM07gfFcWVAWJJSSWEkNq4IWkgpnUuACuPK70jKhzKEaNRlkrDjWYeCdAMyZSxv4fqZ47qbdpMi3+eu4XXNLsf5F7/feryfbQ1Lk1ZzFee/s4uzTb+e9ViG2qsSubcIaxAoMcleVy4suJ+WEkEmhPQs/7ZNEzcIpy6lGC4LByKoTWlk+GqrKn4eGvrO0bWq9xEDOwIsHIIRBDueF5eZYqnTvSGqpNGaYNgDljbEstMsx9FNcBtWnBdu1DbYfKlqeaoLkTPBu0OpIRDXj+q5+0AI+JjRLscNokKBZnyO0IgvejYPE1Y+7M/6gBRwWZ2m5T9gHKsLp4PHqNhpNHr+M4w/qWEmZoWH/XhqZYTpM0bDitYiRWZnMBv898uCGrZJquNQuU8a262t5m/YAnP59+3QZ3UXjyfC+fxNtGhjAn69LpCoBvP3db67t8tTvq6h8SWFmKttzo6mWWFQPLNKexxQpCi2nqG3Y+Vf94XEQTe76l9FdvOnsEZbh2c4tr6P++GkUTW764yjetDIbkUv7zSHJFEWiUgp3BR4m9/34z6do1B9Ek6vhYLRPrxsk6g6JVNHPG7zDPX3TuHp8uB7e7Hre5UfRzTAeR6NtoZtjjq/D8R+TcX/4MI43nvc8NJal1q/eV2kY08t1mDvNSjiL1GVJGbL3TwAAAP//hSXGQwAHAAA=\n\n\n\n- path: \"/opt/azure/containers/kubelet.sh\"\n  permissions: \"0755\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -e\n\n\n\n\n    sed -i \"s|<kubernetesAddonManagerSpec>|',variables('kubernetesAddonManagerSpec'),'|g\" \"/etc/kubernetes/manifests/kube-addon-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g\" \"/etc/kubernetes/manifests/kube-scheduler.yaml\"\n    sed -i \"s|<kubernetesHyperkubeSpec>|',variables('kubernetesHyperkubeSpec'),'|g; s|<kubeClusterCidr>|',variables('kubeClusterCidr'),'|g\" \"/etc/kubernetes/addons/kube-proxy-daemonset.yaml\"\n    sed -i \"s|<kubernetesKubeDNSSpec>|',variables('kubernetesKubeDNSSpec'),'|g; s|<kubernetesDNSMasqSpec>|',variables('kubernetesDNSMasqSpec'),'|g; s|<kubernetesExecHealthzSpec>|',variables('kubernetesExecHealthzSpec'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n    sed -i \"s|<kubernetesHeapsterSpec>|',variables('kubernetesHeapsterSpec'),'|g; s|<kubernetesAddonResizerSpec>|',variables('kubernetesAddonResizerSpec'),'|g\" \"/etc/kubernetes/addons/kube-heapster-deployment.yaml\"\n    sed -i \"s|<kubeDNSServiceIP>|',variables('kubeDNSServiceIP'),'|g\" \"/etc/kubernetes/addons/kube-dns-deployment.yaml\"\n\n\n    sed -i \"s|<kubernetesDashboardSpec>|',variables('kubernetesDashboardSpec'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPURequests>|',variables('kubernetesDashboardCPURequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryRequests>|',variables('kubernetesDashboardMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardCPULimit>|',variables('kubernetesDashboardCPULimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n    sed -i \"s|<kubernetesDashboardMemoryLimit>|',variables('kubernetesDashboardMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kubernetes-dashboard-deployment.yaml\"\n\n\n\n    sed -i \"s|<kubernetesTillerSpec>|',variables('kubernetesTillerSpec'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPURequests>|',variables('kubernetesTillerCPURequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryRequests>|',variables('kubernetesTillerMemoryRequests'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerCPULimit>|',variables('kubernetesTillerCPULimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n    sed -i \"s|<kubernetesTillerMemoryLimit>|',variables('kubernetesTillerMemoryLimit'),'|g\" \"/etc/kubernetes/addons/kube-tiller-deployment.yaml\"\n\n\n\n\n\n\n\n\n\n\n    sed -i \"s|<kubernetesControllerManagerConfig>|\\\"--allocate-node-cidrs=true\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--cluster-cidr=10.244.0.0/16\\\", \\\"--cluster-name=acs-engine-vnet-hybrid\\\", \\\"--cluster-signing-cert-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cluster-signing-key-file=/etc/kubernetes/certs/ca.key\\\", \\\"--kubeconfig=/var/lib/kubelet/kubeconfig\\\", \\\"--leader-elect=true\\\", \\\"--node-monitor-grace-period=40s\\\", \\\"--pod-eviction-timeout=5m0s\\\", \\\"--profiling=False\\\", \\\"--root-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--route-reconciliation-period=10s\\\", \\\"--service-account-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--use-service-account-credentials=true\\\", \\\"--v=2\\\"|g\" \"/etc/kubernetes/manifests/kube-controller-manager.yaml\"\n    sed -i \"s|<kubernetesAPIServerConfig>|\\\"--address=0.0.0.0\\\", \\\"--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota,DenyEscalatingExec,AlwaysPullImages,SecurityContextDeny\\\", \\\"--advertise-address=<kubernetesAPIServerIP>\\\", \\\"--allow-privileged=true\\\", \\\"--anonymous-auth=false\\\", \\\"--audit-log-maxage=30\\\", \\\"--audit-log-maxbackup=10\\\", \\\"--audit-log-maxsize=100\\\", \\\"--audit-log-path=/var/log/apiserver/audit.log\\\", \\\"--authorization-mode=Node,RBAC\\\", \\\"--client-ca-file=/etc/kubernetes/certs/ca.crt\\\", \\\"--cloud-config=/etc/kubernetes/azure.json\\\", \\\"--cloud-provider=azure\\\", \\\"--etcd-cafile=/etc/kubernetes/certs/ca.crt\\\", \\\"--etcd-certfile=/etc/kubernetes/certs/etcdclient.crt\\\", \\\"--etcd-keyfile=/etc/kubernetes/certs/etcdclient.key\\\", \\\"--etcd-quorum-read=true\\\", \\\"--etcd-servers=https://127.0.0.1:2379\\\", \\\"--insecure-port=8080\\\", \\\"--kubelet-client-certificate=/etc/kubernetes/certs/client.crt\\\", \\\"--kubelet-client-key=/etc/kubernetes/certs/client.key\\\", \\\"--profiling=false\\\", \\\"--repair-malformed-updates=false\\\", \\\"--secure-port=443\\\", \\\"--service-account-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--service-account-lookup=true\\\", \\\"--service-cluster-ip-range=10.0.0.0/16\\\", \\\"--storage-backend=etcd3\\\", \\\"--tls-cert-file=/etc/kubernetes/certs/apiserver.crt\\\", \\\"--tls-private-key-file=/etc/kubernetes/certs/apiserver.key\\\", \\\"--v=4\\\"|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n    sed -i \"s|<kubernetesAPIServerIP>|',variables('kubernetesAPIServerIP'),'|g\" \"/etc/kubernetes/manifests/kube-apiserver.yaml\"\n\n\n- path: \"/opt/azure/containers/provision.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('provisionScript'),'\n\n- path: \"/opt/azure/containers/mountetcd.sh\"\n  permissions: \"0744\"\n  encoding: gzip\n  owner: \"root\"\n  content: !!binary |\n    ',variables('mountetcdScript'),'\n\n- path: \"/etc/systemd/system/etcd.service\"\n  permissions: \"0644\"\n  owner: \"root\"\n  content: |\n    [Unit]\n    Description=etcd - highly-available key value store\n    Documentation=https://github.com/coreos/etcd\n    Documentation=man:etcd\n    After=network.target\n    Wants=network-online.target\n    [Service]\n    Environment=DAEMON_ARGS=\n    Environment=ETCD_NAME=%H\n    Environment=ETCD_DATA_DIR=/var/lib/etcd/default\n    EnvironmentFile=-/etc/default/%p\n    Type=notify\n    User=etcd\n    PermissionsStartOnly=true\n    ExecStart=/usr/bin/etcd $DAEMON_ARGS\n    Restart=always\n    [Install]\n    WantedBy=multi-user.target\n    Alias=etcd.service\n\n- path: \"/opt/azure/containers/setup-etcd.sh\"\n  permissions: \"0744\"\n  owner: \"root\"\n  content: |\n    #!/bin/bash\n    set -x\n    ETCD_VER=v',variables('etcdVersion'),'\n    DOWNLOAD_URL=',variables('etcdDownloadURLBase'),'\n    mkdir -p /tmp/etcd-download\n    curl -L ${DOWNLOAD_URL}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\n    tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/bin/ --strip-components=1\n    useradd -U \"etcd\"\n    usermod -p \"$(head -c 32 /dev/urandom | base64)\" \"etcd\"\n    passwd -u \"$etcd\" > /dev/null\n    systemctl daemon-reload\n    systemctl enable etcd.service\n    for i in {1..60}; do\n        if [ -e /opt/azure/containers/etcdcerts.complete ]; then\n            break\n        fi\n        sleep 1\n    done\n    sudo sed -i \"1iETCDCTL_ENDPOINTS=https://127.0.0.1:2379\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CA_FILE=',variables('etcdCaFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_KEY_FILE=',variables('etcdClientKeyFilepath'),'\" /etc/environment\n    sudo sed -i \"1iETCDCTL_CERT_FILE=',variables('etcdClientCertFilepath'),'\" /etc/environment\n\n\nruncmd:\n- retrycmd_if_failure() { for i in {1..5}; do $@; [ $? -eq 0  ] && break || sleep 5; done ; }\n- /opt/azure/containers/setup-etcd.sh\n- apt-mark hold walinuxagent \n- /bin/echo DAEMON_ARGS=--name \"',variables('masterVMNames')[copyIndex(variables('masterOffset'))],'\" --peer-client-cert-auth --peer-trusted-ca-file=',variables('etcdCaFilepath'),' --peer-cert-file=',variables('etcdPeerCertFilepath')[copyIndex(variables('masterOffset'))],' --peer-key-file=',variables('etcdPeerKeyFilepath')[copyIndex(variables('masterOffset'))],' --initial-advertise-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --listen-peer-urls \"',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\" --client-cert-auth --trusted-ca-file=',variables('etcdCaFilepath'),' --cert-file=',variables('etcdServerCertFilepath'),' --key-file=',variables('etcdServerKeyFilepath'),' --advertise-client-urls \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\" --listen-client-urls \"',concat(variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))], ',https://127.0.0.1:', variables('masterEtcdClientPort')),'\" --initial-cluster-token \"k8s-etcd-cluster\" --initial-cluster \"',variables('masterEtcdClusterStates')[div(variables('masterCount'), 2)],' --data-dir \"/var/lib/etcddisk\"\" --initial-cluster-state \"new\" | tee -a /etc/default/etcd\n- /opt/azure/containers/mountetcd.sh\n- sudo /bin/chown -R etcd:etcd /var/lib/etcddisk\n- systemctl stop etcd\n- sudo -u etcd rm -rf /var/lib/etcd/default\n- systemctl daemon-reload\n- sudo /bin/chown etcd:etcd ',variables('etcdServerKeyFilepath'),'\n- sudo /bin/chown etcd:etcd ',variables('etcdPeerKeyFilepath')[copyIndex(variables('masterOffset'))],'\n- systemctl restart etcd\n- MEMBER=\"$(sudo etcdctl member list | grep -E ',variables('masterVMNames')[copyIndex(variables('masterOffset'))],' | cut -d',variables('singleQuote'),':',variables('singleQuote'),' -f 1)\"\n- sudo etcdctl member update ${MEMBER} ',variables('masterEtcdPeerURLs')[copyIndex(variables('masterOffset'))],'\n- for i in $(seq 1 20); do curl --cacert /etc/kubernetes/certs/ca.crt --cert /etc/kubernetes/certs/etcdclient.crt --key /etc/kubernetes/certs/etcdclient.key --max-time 60 \"',variables('masterEtcdClientURLs')[copyIndex(variables('masterOffset'))],'\"/v2/machines; [ $? -eq 0 ] && break || sleep 5; done\n- retrycmd_if_failure apt-get update\n- retrycmd_if_failure apt-get install -y apt-transport-https ca-certificates\n- retrycmd_if_failure curl --max-time 60 -fsSL https://aptdocker.azureedge.net/gpg | apt-key add -\n- echo \"deb ',variables('dockerEngineDownloadRepo'),' ubuntu-xenial main\" | sudo tee /etc/apt/sources.list.d/docker.list\n- \"echo \\\"Package: docker-engine\\nPin: version ',variables('dockerEngineVersion'),'\\nPin-Priority: 550\\n\\\" > /etc/apt/preferences.d/docker.pref\"\n- retrycmd_if_failure apt-get update\n- retrycmd_if_failure apt-get install -y ebtables\n- retrycmd_if_failure apt-get install -y docker-engine\n- systemctl restart docker\n- mkdir -p /etc/kubernetes/manifests\n- usermod -aG docker ',variables('username'),'\n- /usr/lib/apt/apt.systemd.daily\n\n- apt-mark unhold walinuxagent\n- touch /opt/azure/containers/runcmd.complete\n\n'))]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[variables('sshPublicKeyData')]",
                  "path": "[variables('sshKeyPath')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "dataDisks": [
            {
              "createOption": "Empty",
              "diskSizeGB": "[variables('etcdDiskSizeGB')]",
              "lun": 0,
              "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'-etcddisk')]"
            }
          ],
          "imageReference": {
            "offer": "[variables('osImageOffer')]",
            "publisher": "[variables('osImagePublisher')]",
            "sku": "[variables('osImageSku')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        }
      },
      "tags": {
        "creationSource": "[concat(variables('generatorCode'), '-', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]",
        "orchestrator": "[variables('orchestratorNameVersionTag')]",
        "poolName": "master",
        "resourceNameSuffix": "[variables('nameSuffix')]"
      },
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('apiVersionDefault')]",
      "copy": {
        "count": "[sub(variables('masterCount'), variables('masterOffset'))]",
        "name": "vmLoopNode"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')))]"
      ],
      "location": "[variables('location')]",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(variables('masterOffset')),'/cse', copyIndex(variables('masterOffset')))]",
      "properties": {
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat(variables('provisionScriptParametersCommon'),' ',variables('provisionScriptParametersMaster'), ' MASTER_INDEX=',copyIndex(variables('masterOffset')),' /usr/bin/nohup /bin/bash -c \"stat /opt/azure/containers/provision.complete || /bin/bash /opt/azure/containers/provision.sh >> /var/log/azure/cluster-provision.log 2>&1\"')]"
        },
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {},
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    }
  ],
  "outputs": {
    "agentStorageAccountPrefixes": {
      "type": "array",
      "value": "[variables('storageAccountPrefixes')]"
    },
    "agentStorageAccountSuffix": {
      "type": "string",
      "value": "[variables('storageAccountBaseName')]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "primaryAvailabilitySetName": {
      "type": "string",
      "value": "[variables('primaryAvailabilitySetName')]"
    },
    "resourceGroup": {
      "type": "string",
      "value": "[variables('resourceGroup')]"
    },
    "routeTableName": {
      "type": "string",
      "value": "[variables('routeTableName')]"
    },
    "securityGroupName": {
      "type": "string",
      "value": "[variables('nsgName')]"
    },
    "subnetName": {
      "type": "string",
      "value": "[variables('subnetName')]"
    },
    "virtualNetworkName": {
      "type": "string",
      "value": "[variables('virtualNetworkName')]"
    }
  }
}
